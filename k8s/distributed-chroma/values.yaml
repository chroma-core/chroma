# Default values for distributed-chroma.
# Strongly prefer single quotes.

namespace: 'chroma'

frontendService:
  image:
    repository: 'frontend-service'
    tag: 'latest'

  # Sometimes users (and us) want to pass values directly as flags. Sometimes, these are
  # populated from secrets or configMaps. So we let consumers fill these directly.
  # TODO we could maybe have mutually exclusive pieces of config, e.g. isPersistentValue
  # and isPersistentFromConfigMap or something.
  isPersistent: 'value: "TRUE"'
  producerImpl: 'value: "chromadb.logservice.logservice.LogService"'
  consumerImpl: 'value: "chromadb.logservice.logservice.LogService"'
  segmentManagerImpl: 'value: "chromadb.segment.impl.manager.distributed.DistributedSegmentManager"'
  executorImpl: 'value: "chromadb.execution.executor.distributed.DistributedExecutor"'
  allowReset: 'value: "TRUE"'
  sysdbImpl: 'value: "chromadb.db.impl.grpc.client.GrpcSysDB"'
  serverGrpcPort: 'value: "50051"'
  coordinatorHost: 'value: "sysdb.chroma"'
  authProvider: 'value: ""'
  authCredentialsProvider: 'value: ""'
  authzProvider: 'value: ""'
  authzConfigProvider: 'value: ""'
  memberlistProviderImpl: 'value: "chromadb.segment.impl.distributed.segment_directory.CustomResourceMemberlistProvider"'
  logServiceHost: 'value: "logservice.chroma"'
  logServicePort: 'value: "50051"'
  otherEnvConfig: |
    - name: CHROMA_OTEL_COLLECTION_ENDPOINT
      value: "http://jaeger:4317"
    - name: CHROMA_OTEL_GRANULARITY
      value: all
  replicaCount: 2


rustFrontendService:
  image:
    repository: 'rust-frontend-service'
    tag: 'latest'
  replicaCount: 1
  resources:
    limits:
      cpu: '2000m'
      memory: '1Gi'
    requests:
      cpu: '1000m'
      memory: '512Mi'

sysdb:
  image:
    repository: 'sysdb'
    tag: 'latest'
  replicaCount: 1
  env:
  - name: OPTL_TRACING_ENDPOINT
    value: 'value: "jaeger:4317"'
  resources:
    limits:
      cpu: '2000m'
      memory: '1Gi'
    requests:
      cpu: '1000m'
      memory: '512Mi'
  flags:


logService:
  image:
    repository: 'logservice'
    tag: 'latest'
  env:
  - name: OPTL_TRACING_ENDPOINT
    value: 'value: "otel-collector:4317"'
  - name: SYSDB_CONN
    value: 'value: "sysdb.chroma:50051"'
  flags:
  replicaCount: 1


rustLogService:
  image:
    repository: 'rust-log-service'
    tag: 'latest'

queryService:
  image:
    repository: 'query-service'
    tag: 'latest'
  env:
  cache:
    hostPath: '/local/cache/chroma-query-service'
    mountPath: '/cache/'
  replicaCount: 2

compactionService:
  image:
    repository: 'compaction-service'
    tag: 'latest'
  env:
  cache:
    hostPath: '/local/cache/chroma-compaction-service'
    mountPath: '/cache/'
  replicaCount: 1

sysdbMigration:
  image:
    repository: 'sysdb-migration'
    tag: 'latest'
  username: chroma
  password: chroma
  netloc: postgres
  port: 5432
  dbName: sysdb
  sslmode: disable

logServiceMigration:
  image:
    repository: 'logservice-migration'
    tag: 'latest'
  env:
  - name: CHROMA_DB_LOG_URL
    value: 'value: "postgresql://chroma:chroma@postgres.chroma.svc.cluster.local:5432/log?sslmode=disable"'

# Add the garbage collector configuration
garbageCollector:
  image:
    repository: 'garbage-collector'
    tag: 'latest'
  replicaCount: 1
  resources:
    limits:
      cpu: '200m'
      memory: '256Mi'
    requests:
      cpu: '100m'
      memory: '128Mi'
  configuration: |
    service_name: "garbage-collector"
    otel_endpoint: "http://otel-collector:4317"
    relative_cutoff_time_seconds: 43200 # GC all versions created at time < now() - relative_cutoff_time_seconds (12 hours)
    max_collections_to_gc: 1000
    gc_interval_mins: 120
    disallow_collections: []
    sysdb_config:
      host: "sysdb.chroma"
      port: 50051
      connect_timeout_ms: 60000
      request_timeout_ms: 60000
    dispatcher_config:
      num_worker_threads: 4
      dispatcher_queue_size: 100
      worker_queue_size: 100
    storage_config:
      s3:
        bucket: "chroma-storage"
      # object_store:
      #   bucket:
      #     name: "chroma-storage"
      #     type: "minio"
      #   credentials: "Minio"
      #   connect_timeout_ms: 5000
      #   request_timeout_ms: 30000
      #   upload_part_size_bytes: 536870912
      #   download_part_size_bytes: 8388608
