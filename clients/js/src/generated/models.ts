/* eslint-disable */
// tslint:disable
/**
 * FastAPI
 *
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator+.
 * https://github.com/karlvr/openapi-generator-plus
 * Do not edit the class manually.
 */

export namespace Api {
	export interface Add201Response {
	}

	export interface AddEmbedding {
		embeddings: Api.AddEmbedding.Embedding[];
		metadatas?: Api.AddEmbedding.Metadatas.ArrayValue[] | Api.AddEmbedding.Metadatas.ObjectValue;
		documents?: string | Api.AddEmbedding.Documents.ArrayValue[];
		ids?: string | Api.AddEmbedding.Ids.ArrayValue[];
		'increment_index'?: boolean;
	}

	/**
	 * @export
	 * @namespace AddEmbedding
	 */
	export namespace AddEmbedding {
		export interface Embedding {
		}

		export type Metadatas = Api.AddEmbedding.Metadatas.ArrayValue[] | Api.AddEmbedding.Metadatas.ObjectValue;

		/**
		 * @export
		 * @namespace Metadatas
		 */
		export namespace Metadatas {
			export interface ArrayValue {
			}

			export interface ObjectValue {
			}

		}

		export type Documents = string | Api.AddEmbedding.Documents.ArrayValue[];

		/**
		 * @export
		 * @namespace Documents
		 */
		export namespace Documents {
			export interface ArrayValue {
			}

		}

		export type Ids = string | Api.AddEmbedding.Ids.ArrayValue[];

		/**
		 * @export
		 * @namespace Ids
		 */
		export namespace Ids {
			export interface ArrayValue {
			}

		}

	}

	export interface ADelete200Response {
	}

	export interface AGet200Response {
	}

	export interface Count200Response {
	}

	export interface CreateCollection {
		name: string;
		metadata?: Api.CreateCollection.Metadata;
		'get_or_create'?: boolean;
	}

	/**
	 * @export
	 * @namespace CreateCollection
	 */
	export namespace CreateCollection {
		export interface Metadata {
		}

	}

	export interface CreateCollection200Response {
	}

	export interface CreateIndex200Response {
	}

	export interface DeleteCollection200Response {
	}

	export interface DeleteEmbedding {
		ids?: Api.DeleteEmbedding.Id[];
		where?: Api.DeleteEmbedding.Where;
		'where_document'?: Api.DeleteEmbedding.WhereDocument;
	}

	/**
	 * @export
	 * @namespace DeleteEmbedding
	 */
	export namespace DeleteEmbedding {
		export interface Id {
		}

		export interface Where {
		}

		export interface WhereDocument {
		}

	}

	export interface GetCollection200Response {
	}

	export interface GetEmbedding {
		ids?: Api.GetEmbedding.Id[];
		where?: Api.GetEmbedding.Where;
		'where_document'?: Api.GetEmbedding.WhereDocument;
		sort?: string;
		/**
		 * @type {number}
		 * @memberof GetEmbedding
		 */
		limit?: number;
		/**
		 * @type {number}
		 * @memberof GetEmbedding
		 */
		offset?: number;
		include?: Api.GetEmbedding.IncludeEnum[];
	}

	/**
	 * @export
	 * @namespace GetEmbedding
	 */
	export namespace GetEmbedding {
		export interface Id {
		}

		export interface Where {
		}

		export interface WhereDocument {
		}

		export enum IncludeEnum {
			Documents = 'documents',
			Embeddings = 'embeddings',
			Metadatas = 'metadatas',
			Distances = 'distances'
		}

	}

	export interface GetNearestNeighbors200Response {
	}

	export interface Heartbeat200Response {
	}

	export interface HTTPValidationError {
		detail?: Api.ValidationError[];
	}

	export interface ListCollections200Response {
	}

	export interface Persist200Response {
	}

	export interface QueryEmbedding {
		where?: Api.QueryEmbedding.Where;
		'where_document'?: Api.QueryEmbedding.WhereDocument;
		'query_embeddings': Api.QueryEmbedding.QueryEmbedding2[];
		/**
		 * @type {number}
		 * @memberof QueryEmbedding
		 */
		'n_results'?: number;
		include?: Api.QueryEmbedding.IncludeEnum[];
	}

	/**
	 * @export
	 * @namespace QueryEmbedding
	 */
	export namespace QueryEmbedding {
		export interface Where {
		}

		export interface WhereDocument {
		}

		export interface QueryEmbedding2 {
		}

		export enum IncludeEnum {
			Documents = 'documents',
			Embeddings = 'embeddings',
			Metadatas = 'metadatas',
			Distances = 'distances'
		}

	}

	export interface RawSql {
		'raw_sql'?: string;
	}

	export interface RawSql200Response {
	}

	export interface Reset200Response {
	}

	export interface Root200Response {
	}

	export interface Update200Response {
	}

	export interface UpdateCollection {
		'new_name'?: string;
		'new_metadata'?: Api.UpdateCollection.NewMetadata;
	}

	/**
	 * @export
	 * @namespace UpdateCollection
	 */
	export namespace UpdateCollection {
		export interface NewMetadata {
		}

	}

	export interface UpdateCollection200Response {
	}

	export interface UpdateEmbedding {
		embeddings?: Api.UpdateEmbedding.Embedding[];
		metadatas?: Api.UpdateEmbedding.Metadatas.ArrayValue[] | Api.UpdateEmbedding.Metadatas.ObjectValue;
		documents?: string | Api.UpdateEmbedding.Documents.ArrayValue[];
		ids?: string | Api.UpdateEmbedding.Ids.ArrayValue[];
		'increment_index'?: boolean;
	}

	/**
	 * @export
	 * @namespace UpdateEmbedding
	 */
	export namespace UpdateEmbedding {
		export interface Embedding {
		}

		export type Metadatas = Api.UpdateEmbedding.Metadatas.ArrayValue[] | Api.UpdateEmbedding.Metadatas.ObjectValue;

		/**
		 * @export
		 * @namespace Metadatas
		 */
		export namespace Metadatas {
			export interface ArrayValue {
			}

			export interface ObjectValue {
			}

		}

		export type Documents = string | Api.UpdateEmbedding.Documents.ArrayValue[];

		/**
		 * @export
		 * @namespace Documents
		 */
		export namespace Documents {
			export interface ArrayValue {
			}

		}

		export type Ids = string | Api.UpdateEmbedding.Ids.ArrayValue[];

		/**
		 * @export
		 * @namespace Ids
		 */
		export namespace Ids {
			export interface ArrayValue {
			}

		}

	}

	export interface Upsert200Response {
	}

	export interface ValidationError {
		loc: (string | number)[];
		msg: string;
		'type': string;
	}

	export interface Version200Response {
	}

}
