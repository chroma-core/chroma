name: Maturin build

on:
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { os: linux, runner: depot-ubuntu-22.04, target: x86_64, manylinux: auto }
          - { os: linux, runner: depot-ubuntu-22.04, target: x86, manylinux: auto }
          - { os: linux, runner: depot-ubuntu-22.04-arm, target: aarch64, manylinux: auto }
          - { os: linux, runner: depot-ubuntu-22.04, target: armv7, manylinux: auto }
          - { os: linux, runner: depot-ubuntu-22.04, target: s390x, manylinux: auto }
          - { os: linux, runner: depot-ubuntu-22.04, target: ppc64le, manylinux: auto }
          - { os: musllinux, runner: depot-ubuntu-22.04, target: x86_64, manylinux: musllinux_1_2 }
          - { os: musllinux, runner: depot-ubuntu-22.04, target: x86, manylinux: musllinux_1_2 }
          - { os: musllinux, runner: depot-ubuntu-22.04-arm, target: aarch64, manylinux: musllinux_1_2 }
          - { os: musllinux, runner: depot-ubuntu-22.04, target: armv7, manylinux: musllinux_1_2 }
          - { os: windows, runner: windows-latest, target: x64, manylinux: '' }
          - { os: windows, runner: windows-latest, target: x86, manylinux: '' }
          - { os: macos, runner: depot-macos-14, target: x86_64, manylinux: '' }
          - { os: macos, runner: depot-macos-14, target: aarch64, manylinux: '' }

    steps:
      - uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      # On Windows, we want to set up Python with the correct architecture
      - name: Set up Python on Windows
        if: ${{ matrix.platform.os == 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}

      - name: Set up Python on non-Windows
        if: ${{ matrix.platform.os != 'windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: 'true'
          manylinux: ${{ matrix.platform.manylinux }}
          working-directory: rust/python_bindings

      - name: Build free-threaded wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -i python3.13t
          sccache: 'true'
          manylinux: ${{ matrix.platform.manylinux }}
          working-directory: rust/python_bindings

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.os }}-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: rust/python_bindings
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
  #   needs: [build, sdist]  # We now only have 'build' for all platforms + 'sdist'
  #   permissions:
  #     # Use to sign the release artifacts
  #     id-token: write
  #     # Used to upload release artifacts
  #     contents: write
  #     # Used to generate artifact attestation
  #     attestations: write
  #   steps:
  #     - uses: actions/download-artifact@v4

  #     - name: Generate artifact attestation
  #       uses: actions/attest-build-provenance@v1
  #       with:
  #         subject-path: 'wheels-*/*'

  #     - name: Publish to PyPI
  #       if: ${{ startsWith(github.ref, 'refs/tags/') }}
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing wheels-*/*
