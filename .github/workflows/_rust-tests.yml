name: Rust tests

on:
  workflow_call:

jobs:
  test:
    strategy:
      matrix:
        platform: [bp-ubuntu-latest-x64-4x]
    runs-on: ${{ matrix.platform }}
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Build CLI
        run: cargo build --bin chroma
      - name: Test
        run: cargo nextest run --no-capture --profile ci
      - name: Upload test results
        uses: datadog/junit-upload-github-action@v1
        with:
            api_key: ${{ secrets.DD_API_KEY }}
            site: ${{ vars.DD_SITE }}
            service: chroma
            files: target/nextest/ci/junit.xml
            logs: true

  test-integration:
    strategy:
      matrix:
        platform: [bp-ubuntu-latest-x64-16x]
    runs-on: ${{ matrix.platform }}
    # OIDC token auth for Depot & AWS
    permissions:
      contents: read
      id-token: write
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Start services in Tilt
        uses: ./.github/actions/tilt
        with:
          depot-project-id: ${{ vars.DEPOT_PROJECT_ID }}
          BP_DOCKERHUB_TOKEN: ${{ secrets.BP_DOCKERHUB_TOKEN }}
      - name: Build CLI
        run: cargo build --bin chroma
      - name: Run tests
        run: cargo nextest run --profile ci_k8s_integration
      - name: Upload test results
        uses: datadog/junit-upload-github-action@v1
        with:
            api_key: ${{ secrets.DD_API_KEY }}
            site: ${{ vars.DD_SITE }}
            service: chroma
            files: target/nextest/ci/junit.xml
            logs: true
      - name: Save service logs to artifact
        if: always()
        uses: ./.github/actions/export-tilt-logs
        with:
          artifact-name: "rust-integration-test"
  test-benches:
    strategy:
      matrix:
        platform: [bp-ubuntu-latest-x64-16x]
        bench-command:
          - "--bench blockfile_writer -- --sample-size 10"
          - "--bench distance_metrics"
          - "--bench filter"
          - "--bench get"
          - "--bench limit"
          - "--bench query"
    runs-on: ${{ matrix.platform }}
    env:
      RUST_BACKTRACE: 1
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Run benchmark
        run: cargo bench ${{ matrix.bench-command }}

  can-build-release:
    runs-on: bp-ubuntu-latest-x64-16x
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/rust
        with:
          github-token: ${{ github.token }}
      - name: Build in release mode
        run: cargo build --release
