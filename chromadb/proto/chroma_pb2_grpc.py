# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from chromadb.proto import chroma_pb2 as chromadb_dot_proto_dot_chroma__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in chromadb/proto/chroma_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class MetadataReaderStub(object):
    """Metadata Reader Interface 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QueryMetadata = channel.unary_unary(
                '/chroma.MetadataReader/QueryMetadata',
                request_serializer=chromadb_dot_proto_dot_chroma__pb2.QueryMetadataRequest.SerializeToString,
                response_deserializer=chromadb_dot_proto_dot_chroma__pb2.QueryMetadataResponse.FromString,
                _registered_method=True)
        self.CountRecords = channel.unary_unary(
                '/chroma.MetadataReader/CountRecords',
                request_serializer=chromadb_dot_proto_dot_chroma__pb2.CountRecordsRequest.SerializeToString,
                response_deserializer=chromadb_dot_proto_dot_chroma__pb2.CountRecordsResponse.FromString,
                _registered_method=True)


class MetadataReaderServicer(object):
    """Metadata Reader Interface 

    """

    def QueryMetadata(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetadataReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QueryMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryMetadata,
                    request_deserializer=chromadb_dot_proto_dot_chroma__pb2.QueryMetadataRequest.FromString,
                    response_serializer=chromadb_dot_proto_dot_chroma__pb2.QueryMetadataResponse.SerializeToString,
            ),
            'CountRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.CountRecords,
                    request_deserializer=chromadb_dot_proto_dot_chroma__pb2.CountRecordsRequest.FromString,
                    response_serializer=chromadb_dot_proto_dot_chroma__pb2.CountRecordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chroma.MetadataReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetadataReader(object):
    """Metadata Reader Interface 

    """

    @staticmethod
    def QueryMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chroma.MetadataReader/QueryMetadata',
            chromadb_dot_proto_dot_chroma__pb2.QueryMetadataRequest.SerializeToString,
            chromadb_dot_proto_dot_chroma__pb2.QueryMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chroma.MetadataReader/CountRecords',
            chromadb_dot_proto_dot_chroma__pb2.CountRecordsRequest.SerializeToString,
            chromadb_dot_proto_dot_chroma__pb2.CountRecordsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class VectorReaderStub(object):
    """Vector Reader Interface 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetVectors = channel.unary_unary(
                '/chroma.VectorReader/GetVectors',
                request_serializer=chromadb_dot_proto_dot_chroma__pb2.GetVectorsRequest.SerializeToString,
                response_deserializer=chromadb_dot_proto_dot_chroma__pb2.GetVectorsResponse.FromString,
                _registered_method=True)
        self.QueryVectors = channel.unary_unary(
                '/chroma.VectorReader/QueryVectors',
                request_serializer=chromadb_dot_proto_dot_chroma__pb2.QueryVectorsRequest.SerializeToString,
                response_deserializer=chromadb_dot_proto_dot_chroma__pb2.QueryVectorsResponse.FromString,
                _registered_method=True)


class VectorReaderServicer(object):
    """Vector Reader Interface 

    """

    def GetVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryVectors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVectors,
                    request_deserializer=chromadb_dot_proto_dot_chroma__pb2.GetVectorsRequest.FromString,
                    response_serializer=chromadb_dot_proto_dot_chroma__pb2.GetVectorsResponse.SerializeToString,
            ),
            'QueryVectors': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryVectors,
                    request_deserializer=chromadb_dot_proto_dot_chroma__pb2.QueryVectorsRequest.FromString,
                    response_serializer=chromadb_dot_proto_dot_chroma__pb2.QueryVectorsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chroma.VectorReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VectorReader(object):
    """Vector Reader Interface 

    """

    @staticmethod
    def GetVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chroma.VectorReader/GetVectors',
            chromadb_dot_proto_dot_chroma__pb2.GetVectorsRequest.SerializeToString,
            chromadb_dot_proto_dot_chroma__pb2.GetVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryVectors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/chroma.VectorReader/QueryVectors',
            chromadb_dot_proto_dot_chroma__pb2.QueryVectorsRequest.SerializeToString,
            chromadb_dot_proto_dot_chroma__pb2.QueryVectorsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
