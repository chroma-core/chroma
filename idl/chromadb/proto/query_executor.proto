syntax = "proto3";

package chroma;

import "chromadb/proto/chroma.proto";

message ScanOperator {
    Collection collection = 1;
    // Reserve for deprecated fields
    reserved 2, 3, 4;
    Segment knn = 5;
    Segment metadata = 6;
    Segment record = 7;
}

message FilterOperator {
    optional UserIds ids = 1;
    optional Where where = 2;
    optional WhereDocument where_document = 3;
}

message KNNOperator {
    repeated Vector embeddings = 1;
    uint32 fetch = 2;
}

message LimitOperator {
    uint32 skip = 1;
    optional uint32 fetch = 2;
}

message ProjectionOperator {
    bool document = 1;
    bool embedding = 2;
    bool metadata = 3;
}

message KNNProjectionOperator {
    ProjectionOperator projection = 1;
    bool distance = 2;
}

message CountPlan {
    ScanOperator scan = 1;
}

message CountResult {
    uint32 count = 1;
    uint64 pulled_log_bytes = 2;
}

message GetPlan {
    ScanOperator scan = 1;
    FilterOperator filter = 2;
    LimitOperator limit = 3;
    ProjectionOperator projection = 4;
}

message ProjectionRecord {
    string id = 1;
    optional string document = 2;
    optional Vector embedding = 3;
    optional UpdateMetadata metadata = 4;
}

message GetResult {
    repeated ProjectionRecord records = 1;
    uint64 pulled_log_bytes = 2;
}

message KNNPlan {
    ScanOperator scan = 1;
    FilterOperator filter = 2;
    KNNOperator knn = 3;
    KNNProjectionOperator projection = 4;
}

message KNNProjectionRecord {
    ProjectionRecord record = 1;
    optional float distance = 2;
}

message KNNResult {
    repeated KNNProjectionRecord records = 1;
}

message KNNBatchResult {
    repeated KNNResult results = 1;
    uint64 pulled_log_bytes = 2;
}


message Rank {
    message DenseKnn {
        Vector embedding = 1;
        string key = 2;
        uint32 limit = 3;
    }

    message SparseKnn {
        SparseVector embedding = 1;
        string key = 2;
        uint32 limit = 3;
    }

    oneof rank {
        DenseKnn dense_knn = 1;
        SparseKnn sparse_knn = 2;
    }
}


message Score {
    message Absolute {
        Score score = 1;
    }

    message Division {
        Score left = 1;
        Score right = 2;
    }

    message Exponentiation {
        Score score = 1;
    }

    message Logarithm {
        Score score = 1;
    }

    message Maximum {
        repeated Score scores = 1;
    }

    message Metadata {
        string key = 1;
    }

    message Minimum {
        repeated Score scores = 1;
    }

    message Multiplication {
        repeated Score scores = 1;
    }

    message Ordinal {
        Score score = 1;
    }

    message RankScore {
        Rank source = 1;
        optional float default = 2;
    }
    
    message Subtraction {
        Score left = 1;
        Score right = 2;
    }

    message Summation {
        repeated Score scores = 1;
    }

    message Value {
        float value = 1;
    }

    oneof score {
        Absolute absolute = 1;
        Division division = 2;
        Exponentiation exponentiation = 3;
        Logarithm logarithm = 4;
        Maximum maximum = 5;
        Metadata metadata = 6;
        Minimum minimum = 7;
        Multiplication multiplication = 8;
        Ordinal ordinal = 9;
        RankScore rank = 10;
        Subtraction subtraction = 11;
        Summation summation = 12;
        Value value = 13;
    }
}

message ScoreOperator {
    Score score = 1;
}

message ProjectOperator {
    repeated string fields = 1;
}

message Retrieve {
    ScanOperator scan = 1;
    FilterOperator filter = 2;
    ScoreOperator score = 3;
    // AggregateOperator aggregate = 4;
    LimitOperator limit = 5;
    ProjectOperator project = 6;
}

service QueryExecutor {
    rpc Count(CountPlan) returns (CountResult) {}
    rpc Get(GetPlan) returns (GetResult) {}
    rpc KNN(KNNPlan) returns (KNNBatchResult) {}
}

