// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.4
// source: chromadb/proto/chroma.proto

package coordinatorpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Operation int32

const (
	Operation_ADD    Operation = 0
	Operation_UPDATE Operation = 1
	Operation_UPSERT Operation = 2
	Operation_DELETE Operation = 3
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "UPSERT",
		3: "DELETE",
	}
	Operation_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"UPSERT": 2,
		"DELETE": 3,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{0}
}

type ScalarEncoding int32

const (
	ScalarEncoding_FLOAT32 ScalarEncoding = 0
	ScalarEncoding_INT32   ScalarEncoding = 1
)

// Enum value maps for ScalarEncoding.
var (
	ScalarEncoding_name = map[int32]string{
		0: "FLOAT32",
		1: "INT32",
	}
	ScalarEncoding_value = map[string]int32{
		"FLOAT32": 0,
		"INT32":   1,
	}
)

func (x ScalarEncoding) Enum() *ScalarEncoding {
	p := new(ScalarEncoding)
	*p = x
	return p
}

func (x ScalarEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[1].Descriptor()
}

func (ScalarEncoding) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[1]
}

func (x ScalarEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalarEncoding.Descriptor instead.
func (ScalarEncoding) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{1}
}

type SegmentScope int32

const (
	SegmentScope_VECTOR   SegmentScope = 0
	SegmentScope_METADATA SegmentScope = 1
)

// Enum value maps for SegmentScope.
var (
	SegmentScope_name = map[int32]string{
		0: "VECTOR",
		1: "METADATA",
	}
	SegmentScope_value = map[string]int32{
		"VECTOR":   0,
		"METADATA": 1,
	}
)

func (x SegmentScope) Enum() *SegmentScope {
	p := new(SegmentScope)
	*p = x
	return p
}

func (x SegmentScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentScope) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[2].Descriptor()
}

func (SegmentScope) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[2]
}

func (x SegmentScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentScope.Descriptor instead.
func (SegmentScope) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{2}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"` // TODO: What is the enum of this code?
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type ChromaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status *Status `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChromaResponse) Reset() {
	*x = ChromaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChromaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChromaResponse) ProtoMessage() {}

func (x *ChromaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChromaResponse.ProtoReflect.Descriptor instead.
func (*ChromaResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{1}
}

func (x *ChromaResponse) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension int32          `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Vector    []byte         `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Encoding  ScalarEncoding `protobuf:"varint,3,opt,name=encoding,proto3,enum=chroma.ScalarEncoding" json:"encoding,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{2}
}

func (x *Vector) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *Vector) GetVector() []byte {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *Vector) GetEncoding() ScalarEncoding {
	if x != nil {
		return x.Encoding
	}
	return ScalarEncoding_FLOAT32
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  string       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Scope SegmentScope `protobuf:"varint,3,opt,name=scope,proto3,enum=chroma.SegmentScope" json:"scope,omitempty"`
	Topic *string      `protobuf:"bytes,4,opt,name=topic,proto3,oneof" json:"topic,omitempty"` // TODO should channel <> segment binding exist here?
	// If a segment has a collection, it implies that this segment implements the full
	// collection and can be used to service queries (for it's given scope.)
	Collection *string         `protobuf:"bytes,5,opt,name=collection,proto3,oneof" json:"collection,omitempty"`
	Metadata   *UpdateMetadata `protobuf:"bytes,6,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{3}
}

func (x *Segment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Segment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Segment) GetScope() SegmentScope {
	if x != nil {
		return x.Scope
	}
	return SegmentScope_VECTOR
}

func (x *Segment) GetTopic() string {
	if x != nil && x.Topic != nil {
		return *x.Topic
	}
	return ""
}

func (x *Segment) GetCollection() string {
	if x != nil && x.Collection != nil {
		return *x.Collection
	}
	return ""
}

func (x *Segment) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Topic     string          `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Metadata  *UpdateMetadata `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Dimension *int32          `protobuf:"varint,5,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	Tenant    string          `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Database  string          `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{4}
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Collection) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Collection) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *Collection) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Collection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{5}
}

func (x *Database) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{6}
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateMetadataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*UpdateMetadataValue_StringValue
	//	*UpdateMetadataValue_IntValue
	//	*UpdateMetadataValue_FloatValue
	Value isUpdateMetadataValue_Value `protobuf_oneof:"value"`
}

func (x *UpdateMetadataValue) Reset() {
	*x = UpdateMetadataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetadataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetadataValue) ProtoMessage() {}

func (x *UpdateMetadataValue) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetadataValue.ProtoReflect.Descriptor instead.
func (*UpdateMetadataValue) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{7}
}

func (m *UpdateMetadataValue) GetValue() isUpdateMetadataValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UpdateMetadataValue) GetStringValue() string {
	if x, ok := x.GetValue().(*UpdateMetadataValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *UpdateMetadataValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*UpdateMetadataValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *UpdateMetadataValue) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*UpdateMetadataValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isUpdateMetadataValue_Value interface {
	isUpdateMetadataValue_Value()
}

type UpdateMetadataValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type UpdateMetadataValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type UpdateMetadataValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*UpdateMetadataValue_StringValue) isUpdateMetadataValue_Value() {}

func (*UpdateMetadataValue_IntValue) isUpdateMetadataValue_Value() {}

func (*UpdateMetadataValue_FloatValue) isUpdateMetadataValue_Value() {}

type UpdateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]*UpdateMetadataValue `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMetadata) Reset() {
	*x = UpdateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetadata) ProtoMessage() {}

func (x *UpdateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetadata.ProtoReflect.Descriptor instead.
func (*UpdateMetadata) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateMetadata) GetMetadata() map[string]*UpdateMetadataValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type SubmitEmbeddingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector       *Vector         `protobuf:"bytes,2,opt,name=vector,proto3,oneof" json:"vector,omitempty"`
	Metadata     *UpdateMetadata `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Operation    Operation       `protobuf:"varint,4,opt,name=operation,proto3,enum=chroma.Operation" json:"operation,omitempty"`
	CollectionId string          `protobuf:"bytes,5,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
}

func (x *SubmitEmbeddingRecord) Reset() {
	*x = SubmitEmbeddingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitEmbeddingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEmbeddingRecord) ProtoMessage() {}

func (x *SubmitEmbeddingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEmbeddingRecord.ProtoReflect.Descriptor instead.
func (*SubmitEmbeddingRecord) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{9}
}

func (x *SubmitEmbeddingRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubmitEmbeddingRecord) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SubmitEmbeddingRecord) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubmitEmbeddingRecord) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_ADD
}

func (x *SubmitEmbeddingRecord) GetCollectionId() string {
	if x != nil {
		return x.CollectionId
	}
	return ""
}

type VectorEmbeddingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeqId  []byte  `protobuf:"bytes,2,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Vector *Vector `protobuf:"bytes,3,opt,name=vector,proto3" json:"vector,omitempty"` // TODO: we need to rethink source of truth for vector dimensionality and encoding
}

func (x *VectorEmbeddingRecord) Reset() {
	*x = VectorEmbeddingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorEmbeddingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorEmbeddingRecord) ProtoMessage() {}

func (x *VectorEmbeddingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorEmbeddingRecord.ProtoReflect.Descriptor instead.
func (*VectorEmbeddingRecord) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{10}
}

func (x *VectorEmbeddingRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorEmbeddingRecord) GetSeqId() []byte {
	if x != nil {
		return x.SeqId
	}
	return nil
}

func (x *VectorEmbeddingRecord) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type VectorQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SeqId    []byte  `protobuf:"bytes,2,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Distance float64 `protobuf:"fixed64,3,opt,name=distance,proto3" json:"distance,omitempty"`
	Vector   *Vector `protobuf:"bytes,4,opt,name=vector,proto3,oneof" json:"vector,omitempty"`
}

func (x *VectorQueryResult) Reset() {
	*x = VectorQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQueryResult) ProtoMessage() {}

func (x *VectorQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQueryResult.ProtoReflect.Descriptor instead.
func (*VectorQueryResult) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{11}
}

func (x *VectorQueryResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorQueryResult) GetSeqId() []byte {
	if x != nil {
		return x.SeqId
	}
	return nil
}

func (x *VectorQueryResult) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *VectorQueryResult) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type VectorQueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VectorQueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *VectorQueryResults) Reset() {
	*x = VectorQueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQueryResults) ProtoMessage() {}

func (x *VectorQueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQueryResults.ProtoReflect.Descriptor instead.
func (*VectorQueryResults) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{12}
}

func (x *VectorQueryResults) GetResults() []*VectorQueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetVectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	SegmentId string   `protobuf:"bytes,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
}

func (x *GetVectorsRequest) Reset() {
	*x = GetVectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorsRequest) ProtoMessage() {}

func (x *GetVectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorsRequest.ProtoReflect.Descriptor instead.
func (*GetVectorsRequest) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{13}
}

func (x *GetVectorsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetVectorsRequest) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

type GetVectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*VectorEmbeddingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetVectorsResponse) Reset() {
	*x = GetVectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorsResponse) ProtoMessage() {}

func (x *GetVectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorsResponse.ProtoReflect.Descriptor instead.
func (*GetVectorsResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{14}
}

func (x *GetVectorsResponse) GetRecords() []*VectorEmbeddingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type QueryVectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vectors           []*Vector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty"`
	K                 int32     `protobuf:"varint,2,opt,name=k,proto3" json:"k,omitempty"`
	AllowedIds        []string  `protobuf:"bytes,3,rep,name=allowed_ids,json=allowedIds,proto3" json:"allowed_ids,omitempty"`
	IncludeEmbeddings bool      `protobuf:"varint,4,opt,name=include_embeddings,json=includeEmbeddings,proto3" json:"include_embeddings,omitempty"`
	SegmentId         string    `protobuf:"bytes,5,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"` // TODO: options as in types.py, its currently unused so can add later
}

func (x *QueryVectorsRequest) Reset() {
	*x = QueryVectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVectorsRequest) ProtoMessage() {}

func (x *QueryVectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVectorsRequest.ProtoReflect.Descriptor instead.
func (*QueryVectorsRequest) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{15}
}

func (x *QueryVectorsRequest) GetVectors() []*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *QueryVectorsRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *QueryVectorsRequest) GetAllowedIds() []string {
	if x != nil {
		return x.AllowedIds
	}
	return nil
}

func (x *QueryVectorsRequest) GetIncludeEmbeddings() bool {
	if x != nil {
		return x.IncludeEmbeddings
	}
	return false
}

func (x *QueryVectorsRequest) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

type QueryVectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VectorQueryResults `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QueryVectorsResponse) Reset() {
	*x = QueryVectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVectorsResponse) ProtoMessage() {}

func (x *QueryVectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVectorsResponse.ProtoReflect.Descriptor instead.
func (*QueryVectorsResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{16}
}

func (x *QueryVectorsResponse) GetResults() []*VectorQueryResults {
	if x != nil {
		return x.Results
	}
	return nil
}

var File_chromadb_proto_chroma_proto protoreflect.FileDescriptor

var file_chromadb_proto_chroma_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61,
	0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xf8, 0x01, 0x0a, 0x07, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x37, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x22, 0x1c, 0x0a, 0x06, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85,
	0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x15, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x11,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x73, 0x65, 0x71, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x12,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6b, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x14, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0x38, 0x0a, 0x09, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x03, 0x2a, 0x28, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x2a, 0x28, 0x0a,
	0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54,
	0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x32, 0xa2, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1b, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x43, 0x5a, 0x41,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2d, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chromadb_proto_chroma_proto_rawDescOnce sync.Once
	file_chromadb_proto_chroma_proto_rawDescData = file_chromadb_proto_chroma_proto_rawDesc
)

func file_chromadb_proto_chroma_proto_rawDescGZIP() []byte {
	file_chromadb_proto_chroma_proto_rawDescOnce.Do(func() {
		file_chromadb_proto_chroma_proto_rawDescData = protoimpl.X.CompressGZIP(file_chromadb_proto_chroma_proto_rawDescData)
	})
	return file_chromadb_proto_chroma_proto_rawDescData
}

var file_chromadb_proto_chroma_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_chromadb_proto_chroma_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_chromadb_proto_chroma_proto_goTypes = []interface{}{
	(Operation)(0),                // 0: chroma.Operation
	(ScalarEncoding)(0),           // 1: chroma.ScalarEncoding
	(SegmentScope)(0),             // 2: chroma.SegmentScope
	(*Status)(nil),                // 3: chroma.Status
	(*ChromaResponse)(nil),        // 4: chroma.ChromaResponse
	(*Vector)(nil),                // 5: chroma.Vector
	(*Segment)(nil),               // 6: chroma.Segment
	(*Collection)(nil),            // 7: chroma.Collection
	(*Database)(nil),              // 8: chroma.Database
	(*Tenant)(nil),                // 9: chroma.Tenant
	(*UpdateMetadataValue)(nil),   // 10: chroma.UpdateMetadataValue
	(*UpdateMetadata)(nil),        // 11: chroma.UpdateMetadata
	(*SubmitEmbeddingRecord)(nil), // 12: chroma.SubmitEmbeddingRecord
	(*VectorEmbeddingRecord)(nil), // 13: chroma.VectorEmbeddingRecord
	(*VectorQueryResult)(nil),     // 14: chroma.VectorQueryResult
	(*VectorQueryResults)(nil),    // 15: chroma.VectorQueryResults
	(*GetVectorsRequest)(nil),     // 16: chroma.GetVectorsRequest
	(*GetVectorsResponse)(nil),    // 17: chroma.GetVectorsResponse
	(*QueryVectorsRequest)(nil),   // 18: chroma.QueryVectorsRequest
	(*QueryVectorsResponse)(nil),  // 19: chroma.QueryVectorsResponse
	nil,                           // 20: chroma.UpdateMetadata.MetadataEntry
}
var file_chromadb_proto_chroma_proto_depIdxs = []int32{
	3,  // 0: chroma.ChromaResponse.status:type_name -> chroma.Status
	1,  // 1: chroma.Vector.encoding:type_name -> chroma.ScalarEncoding
	2,  // 2: chroma.Segment.scope:type_name -> chroma.SegmentScope
	11, // 3: chroma.Segment.metadata:type_name -> chroma.UpdateMetadata
	11, // 4: chroma.Collection.metadata:type_name -> chroma.UpdateMetadata
	20, // 5: chroma.UpdateMetadata.metadata:type_name -> chroma.UpdateMetadata.MetadataEntry
	5,  // 6: chroma.SubmitEmbeddingRecord.vector:type_name -> chroma.Vector
	11, // 7: chroma.SubmitEmbeddingRecord.metadata:type_name -> chroma.UpdateMetadata
	0,  // 8: chroma.SubmitEmbeddingRecord.operation:type_name -> chroma.Operation
	5,  // 9: chroma.VectorEmbeddingRecord.vector:type_name -> chroma.Vector
	5,  // 10: chroma.VectorQueryResult.vector:type_name -> chroma.Vector
	14, // 11: chroma.VectorQueryResults.results:type_name -> chroma.VectorQueryResult
	13, // 12: chroma.GetVectorsResponse.records:type_name -> chroma.VectorEmbeddingRecord
	5,  // 13: chroma.QueryVectorsRequest.vectors:type_name -> chroma.Vector
	15, // 14: chroma.QueryVectorsResponse.results:type_name -> chroma.VectorQueryResults
	10, // 15: chroma.UpdateMetadata.MetadataEntry.value:type_name -> chroma.UpdateMetadataValue
	16, // 16: chroma.VectorReader.GetVectors:input_type -> chroma.GetVectorsRequest
	18, // 17: chroma.VectorReader.QueryVectors:input_type -> chroma.QueryVectorsRequest
	17, // 18: chroma.VectorReader.GetVectors:output_type -> chroma.GetVectorsResponse
	19, // 19: chroma.VectorReader.QueryVectors:output_type -> chroma.QueryVectorsResponse
	18, // [18:20] is the sub-list for method output_type
	16, // [16:18] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_chromadb_proto_chroma_proto_init() }
func file_chromadb_proto_chroma_proto_init() {
	if File_chromadb_proto_chroma_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chromadb_proto_chroma_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChromaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetadataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitEmbeddingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorEmbeddingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chromadb_proto_chroma_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UpdateMetadataValue_StringValue)(nil),
		(*UpdateMetadataValue_IntValue)(nil),
		(*UpdateMetadataValue_FloatValue)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chromadb_proto_chroma_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chromadb_proto_chroma_proto_goTypes,
		DependencyIndexes: file_chromadb_proto_chroma_proto_depIdxs,
		EnumInfos:         file_chromadb_proto_chroma_proto_enumTypes,
		MessageInfos:      file_chromadb_proto_chroma_proto_msgTypes,
	}.Build()
	File_chromadb_proto_chroma_proto = out.File
	file_chromadb_proto_chroma_proto_rawDesc = nil
	file_chromadb_proto_chroma_proto_goTypes = nil
	file_chromadb_proto_chroma_proto_depIdxs = nil
}
