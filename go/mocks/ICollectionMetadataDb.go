// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"
)

// ICollectionMetadataDb is an autogenerated mock type for the ICollectionMetadataDb type
type ICollectionMetadataDb struct {
	mock.Mock
}

// DeleteAll provides a mock function with given fields:
func (_m *ICollectionMetadataDb) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByCollectionID provides a mock function with given fields: collectionID
func (_m *ICollectionMetadataDb) DeleteByCollectionID(collectionID string) (int, error) {
	ret := _m.Called(collectionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByCollectionID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(collectionID)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(collectionID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(collectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: in
func (_m *ICollectionMetadataDb) Insert(in []*dbmodel.CollectionMetadata) error {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*dbmodel.CollectionMetadata) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICollectionMetadataDb creates a new instance of ICollectionMetadataDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICollectionMetadataDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICollectionMetadataDb {
	mock := &ICollectionMetadataDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
