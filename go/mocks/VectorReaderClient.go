// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	coordinatorpb "github.com/chroma-core/chroma/go/pkg/proto/coordinatorpb"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// VectorReaderClient is an autogenerated mock type for the VectorReaderClient type
type VectorReaderClient struct {
	mock.Mock
}

// GetVectors provides a mock function with given fields: ctx, in, opts
func (_m *VectorReaderClient) GetVectors(ctx context.Context, in *coordinatorpb.GetVectorsRequest, opts ...grpc.CallOption) (*coordinatorpb.GetVectorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVectors")
	}

	var r0 *coordinatorpb.GetVectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetVectorsRequest, ...grpc.CallOption) (*coordinatorpb.GetVectorsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetVectorsRequest, ...grpc.CallOption) *coordinatorpb.GetVectorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetVectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetVectorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryVectors provides a mock function with given fields: ctx, in, opts
func (_m *VectorReaderClient) QueryVectors(ctx context.Context, in *coordinatorpb.QueryVectorsRequest, opts ...grpc.CallOption) (*coordinatorpb.QueryVectorsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryVectors")
	}

	var r0 *coordinatorpb.QueryVectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.QueryVectorsRequest, ...grpc.CallOption) (*coordinatorpb.QueryVectorsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.QueryVectorsRequest, ...grpc.CallOption) *coordinatorpb.QueryVectorsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.QueryVectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.QueryVectorsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVectorReaderClient creates a new instance of VectorReaderClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorReaderClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorReaderClient {
	mock := &VectorReaderClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
