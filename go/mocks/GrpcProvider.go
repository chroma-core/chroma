// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	grpcutils "github.com/chroma-core/chroma/go/pkg/grpcutils"
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"
)

// GrpcProvider is an autogenerated mock type for the GrpcProvider type
type GrpcProvider struct {
	mock.Mock
}

// StartGrpcServer provides a mock function with given fields: name, grpcConfig, registerFunc
func (_m *GrpcProvider) StartGrpcServer(name string, grpcConfig *grpcutils.GrpcConfig, registerFunc func(grpc.ServiceRegistrar)) (grpcutils.GrpcServer, error) {
	ret := _m.Called(name, grpcConfig, registerFunc)

	if len(ret) == 0 {
		panic("no return value specified for StartGrpcServer")
	}

	var r0 grpcutils.GrpcServer
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *grpcutils.GrpcConfig, func(grpc.ServiceRegistrar)) (grpcutils.GrpcServer, error)); ok {
		return rf(name, grpcConfig, registerFunc)
	}
	if rf, ok := ret.Get(0).(func(string, *grpcutils.GrpcConfig, func(grpc.ServiceRegistrar)) grpcutils.GrpcServer); ok {
		r0 = rf(name, grpcConfig, registerFunc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpcutils.GrpcServer)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *grpcutils.GrpcConfig, func(grpc.ServiceRegistrar)) error); ok {
		r1 = rf(name, grpcConfig, registerFunc)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGrpcProvider creates a new instance of GrpcProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGrpcProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GrpcProvider {
	mock := &GrpcProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
