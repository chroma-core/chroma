// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	types "github.com/chroma-core/chroma/go/pkg/types"
)

// IRecordLogDb is an autogenerated mock type for the IRecordLogDb type
type IRecordLogDb struct {
	mock.Mock
}

// GetAllCollectionsToCompact provides a mock function with given fields:
func (_m *IRecordLogDb) GetAllCollectionsToCompact() ([]*dbmodel.RecordLog, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllCollectionsToCompact")
	}

	var r0 []*dbmodel.RecordLog
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*dbmodel.RecordLog, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*dbmodel.RecordLog); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.RecordLog)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullLogs provides a mock function with given fields: collectionID, id, batchSize, endTimestamp
func (_m *IRecordLogDb) PullLogs(collectionID types.UniqueID, id int64, batchSize int, endTimestamp int64) ([]*dbmodel.RecordLog, error) {
	ret := _m.Called(collectionID, id, batchSize, endTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for PullLogs")
	}

	var r0 []*dbmodel.RecordLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UniqueID, int64, int, int64) ([]*dbmodel.RecordLog, error)); ok {
		return rf(collectionID, id, batchSize, endTimestamp)
	}
	if rf, ok := ret.Get(0).(func(types.UniqueID, int64, int, int64) []*dbmodel.RecordLog); ok {
		r0 = rf(collectionID, id, batchSize, endTimestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.RecordLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.UniqueID, int64, int, int64) error); ok {
		r1 = rf(collectionID, id, batchSize, endTimestamp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushLogs provides a mock function with given fields: collectionID, recordsContent
func (_m *IRecordLogDb) PushLogs(collectionID types.UniqueID, recordsContent [][]byte) (int, error) {
	ret := _m.Called(collectionID, recordsContent)

	if len(ret) == 0 {
		panic("no return value specified for PushLogs")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(types.UniqueID, [][]byte) (int, error)); ok {
		return rf(collectionID, recordsContent)
	}
	if rf, ok := ret.Get(0).(func(types.UniqueID, [][]byte) int); ok {
		r0 = rf(collectionID, recordsContent)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(types.UniqueID, [][]byte) error); ok {
		r1 = rf(collectionID, recordsContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRecordLogDb creates a new instance of IRecordLogDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRecordLogDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRecordLogDb {
	mock := &IRecordLogDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
