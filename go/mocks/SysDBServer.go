// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	coordinatorpb "github.com/chroma-core/chroma/go/pkg/proto/coordinatorpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"
)

// SysDBServer is an autogenerated mock type for the SysDBServer type
type SysDBServer struct {
	mock.Mock
}

// CreateCollection provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) CreateCollection(_a0 context.Context, _a1 *coordinatorpb.CreateCollectionRequest) (*coordinatorpb.CreateCollectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 *coordinatorpb.CreateCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateCollectionRequest) (*coordinatorpb.CreateCollectionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateCollectionRequest) *coordinatorpb.CreateCollectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.CreateCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.CreateCollectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabase provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) CreateDatabase(_a0 context.Context, _a1 *coordinatorpb.CreateDatabaseRequest) (*coordinatorpb.CreateDatabaseResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 *coordinatorpb.CreateDatabaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateDatabaseRequest) (*coordinatorpb.CreateDatabaseResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateDatabaseRequest) *coordinatorpb.CreateDatabaseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.CreateDatabaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.CreateDatabaseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegment provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) CreateSegment(_a0 context.Context, _a1 *coordinatorpb.CreateSegmentRequest) (*coordinatorpb.CreateSegmentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateSegment")
	}

	var r0 *coordinatorpb.CreateSegmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateSegmentRequest) (*coordinatorpb.CreateSegmentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateSegmentRequest) *coordinatorpb.CreateSegmentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.CreateSegmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.CreateSegmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenant provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) CreateTenant(_a0 context.Context, _a1 *coordinatorpb.CreateTenantRequest) (*coordinatorpb.CreateTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateTenant")
	}

	var r0 *coordinatorpb.CreateTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateTenantRequest) (*coordinatorpb.CreateTenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.CreateTenantRequest) *coordinatorpb.CreateTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.CreateTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.CreateTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollection provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) DeleteCollection(_a0 context.Context, _a1 *coordinatorpb.DeleteCollectionRequest) (*coordinatorpb.DeleteCollectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 *coordinatorpb.DeleteCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.DeleteCollectionRequest) (*coordinatorpb.DeleteCollectionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.DeleteCollectionRequest) *coordinatorpb.DeleteCollectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.DeleteCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.DeleteCollectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) DeleteSegment(_a0 context.Context, _a1 *coordinatorpb.DeleteSegmentRequest) (*coordinatorpb.DeleteSegmentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSegment")
	}

	var r0 *coordinatorpb.DeleteSegmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.DeleteSegmentRequest) (*coordinatorpb.DeleteSegmentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.DeleteSegmentRequest) *coordinatorpb.DeleteSegmentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.DeleteSegmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.DeleteSegmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushCollectionCompaction provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) FlushCollectionCompaction(_a0 context.Context, _a1 *coordinatorpb.FlushCollectionCompactionRequest) (*coordinatorpb.FlushCollectionCompactionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FlushCollectionCompaction")
	}

	var r0 *coordinatorpb.FlushCollectionCompactionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.FlushCollectionCompactionRequest) (*coordinatorpb.FlushCollectionCompactionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.FlushCollectionCompactionRequest) *coordinatorpb.FlushCollectionCompactionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.FlushCollectionCompactionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.FlushCollectionCompactionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollections provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) GetCollections(_a0 context.Context, _a1 *coordinatorpb.GetCollectionsRequest) (*coordinatorpb.GetCollectionsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCollections")
	}

	var r0 *coordinatorpb.GetCollectionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetCollectionsRequest) (*coordinatorpb.GetCollectionsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetCollectionsRequest) *coordinatorpb.GetCollectionsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetCollectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetCollectionsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabase provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) GetDatabase(_a0 context.Context, _a1 *coordinatorpb.GetDatabaseRequest) (*coordinatorpb.GetDatabaseResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 *coordinatorpb.GetDatabaseResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetDatabaseRequest) (*coordinatorpb.GetDatabaseResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetDatabaseRequest) *coordinatorpb.GetDatabaseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetDatabaseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetDatabaseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastCompactionTimeForTenant provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) GetLastCompactionTimeForTenant(_a0 context.Context, _a1 *coordinatorpb.GetLastCompactionTimeForTenantRequest) (*coordinatorpb.GetLastCompactionTimeForTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLastCompactionTimeForTenant")
	}

	var r0 *coordinatorpb.GetLastCompactionTimeForTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetLastCompactionTimeForTenantRequest) (*coordinatorpb.GetLastCompactionTimeForTenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetLastCompactionTimeForTenantRequest) *coordinatorpb.GetLastCompactionTimeForTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetLastCompactionTimeForTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetLastCompactionTimeForTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegments provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) GetSegments(_a0 context.Context, _a1 *coordinatorpb.GetSegmentsRequest) (*coordinatorpb.GetSegmentsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSegments")
	}

	var r0 *coordinatorpb.GetSegmentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetSegmentsRequest) (*coordinatorpb.GetSegmentsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetSegmentsRequest) *coordinatorpb.GetSegmentsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetSegmentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetSegmentsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenant provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) GetTenant(_a0 context.Context, _a1 *coordinatorpb.GetTenantRequest) (*coordinatorpb.GetTenantResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTenant")
	}

	var r0 *coordinatorpb.GetTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetTenantRequest) (*coordinatorpb.GetTenantResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetTenantRequest) *coordinatorpb.GetTenantResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetState provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) ResetState(_a0 context.Context, _a1 *emptypb.Empty) (*coordinatorpb.ResetStateResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ResetState")
	}

	var r0 *coordinatorpb.ResetStateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*coordinatorpb.ResetStateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *coordinatorpb.ResetStateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.ResetStateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLastCompactionTimeForTenant provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) SetLastCompactionTimeForTenant(_a0 context.Context, _a1 *coordinatorpb.SetLastCompactionTimeForTenantRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SetLastCompactionTimeForTenant")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.SetLastCompactionTimeForTenantRequest) (*emptypb.Empty, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.SetLastCompactionTimeForTenantRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.SetLastCompactionTimeForTenantRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) UpdateCollection(_a0 context.Context, _a1 *coordinatorpb.UpdateCollectionRequest) (*coordinatorpb.UpdateCollectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollection")
	}

	var r0 *coordinatorpb.UpdateCollectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.UpdateCollectionRequest) (*coordinatorpb.UpdateCollectionResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.UpdateCollectionRequest) *coordinatorpb.UpdateCollectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.UpdateCollectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.UpdateCollectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegment provides a mock function with given fields: _a0, _a1
func (_m *SysDBServer) UpdateSegment(_a0 context.Context, _a1 *coordinatorpb.UpdateSegmentRequest) (*coordinatorpb.UpdateSegmentResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSegment")
	}

	var r0 *coordinatorpb.UpdateSegmentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.UpdateSegmentRequest) (*coordinatorpb.UpdateSegmentResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.UpdateSegmentRequest) *coordinatorpb.UpdateSegmentResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.UpdateSegmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.UpdateSegmentRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedSysDBServer provides a mock function with given fields:
func (_m *SysDBServer) mustEmbedUnimplementedSysDBServer() {
	_m.Called()
}

// NewSysDBServer creates a new instance of SysDBServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSysDBServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *SysDBServer {
	mock := &SysDBServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
