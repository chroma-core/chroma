// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	coordinatorpb "github.com/chroma-core/chroma/go/pkg/proto/coordinatorpb"
	mock "github.com/stretchr/testify/mock"
)

// VectorReaderServer is an autogenerated mock type for the VectorReaderServer type
type VectorReaderServer struct {
	mock.Mock
}

// GetVectors provides a mock function with given fields: _a0, _a1
func (_m *VectorReaderServer) GetVectors(_a0 context.Context, _a1 *coordinatorpb.GetVectorsRequest) (*coordinatorpb.GetVectorsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetVectors")
	}

	var r0 *coordinatorpb.GetVectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetVectorsRequest) (*coordinatorpb.GetVectorsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.GetVectorsRequest) *coordinatorpb.GetVectorsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.GetVectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.GetVectorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryVectors provides a mock function with given fields: _a0, _a1
func (_m *VectorReaderServer) QueryVectors(_a0 context.Context, _a1 *coordinatorpb.QueryVectorsRequest) (*coordinatorpb.QueryVectorsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for QueryVectors")
	}

	var r0 *coordinatorpb.QueryVectorsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.QueryVectorsRequest) (*coordinatorpb.QueryVectorsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *coordinatorpb.QueryVectorsRequest) *coordinatorpb.QueryVectorsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coordinatorpb.QueryVectorsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *coordinatorpb.QueryVectorsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedVectorReaderServer provides a mock function with given fields:
func (_m *VectorReaderServer) mustEmbedUnimplementedVectorReaderServer() {
	_m.Called()
}

// NewVectorReaderServer creates a new instance of VectorReaderServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVectorReaderServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *VectorReaderServer {
	mock := &VectorReaderServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
