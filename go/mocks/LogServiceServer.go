// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	logservicepb "github.com/chroma-core/chroma/go/pkg/proto/logservicepb"
	mock "github.com/stretchr/testify/mock"
)

// LogServiceServer is an autogenerated mock type for the LogServiceServer type
type LogServiceServer struct {
	mock.Mock
}

// GetAllCollectionInfoToCompact provides a mock function with given fields: _a0, _a1
func (_m *LogServiceServer) GetAllCollectionInfoToCompact(_a0 context.Context, _a1 *logservicepb.GetAllCollectionInfoToCompactRequest) (*logservicepb.GetAllCollectionInfoToCompactResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCollectionInfoToCompact")
	}

	var r0 *logservicepb.GetAllCollectionInfoToCompactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest) (*logservicepb.GetAllCollectionInfoToCompactResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest) *logservicepb.GetAllCollectionInfoToCompactResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.GetAllCollectionInfoToCompactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullLogs provides a mock function with given fields: _a0, _a1
func (_m *LogServiceServer) PullLogs(_a0 context.Context, _a1 *logservicepb.PullLogsRequest) (*logservicepb.PullLogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PullLogs")
	}

	var r0 *logservicepb.PullLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PullLogsRequest) (*logservicepb.PullLogsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PullLogsRequest) *logservicepb.PullLogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.PullLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.PullLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushLogs provides a mock function with given fields: _a0, _a1
func (_m *LogServiceServer) PushLogs(_a0 context.Context, _a1 *logservicepb.PushLogsRequest) (*logservicepb.PushLogsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PushLogs")
	}

	var r0 *logservicepb.PushLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PushLogsRequest) (*logservicepb.PushLogsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PushLogsRequest) *logservicepb.PushLogsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.PushLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.PushLogsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mustEmbedUnimplementedLogServiceServer provides a mock function with given fields:
func (_m *LogServiceServer) mustEmbedUnimplementedLogServiceServer() {
	_m.Called()
}

// NewLogServiceServer creates a new instance of LogServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogServiceServer {
	mock := &LogServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
