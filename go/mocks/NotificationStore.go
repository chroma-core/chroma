// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/chroma-core/chroma/go/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// NotificationStore is an autogenerated mock type for the NotificationStore type
type NotificationStore struct {
	mock.Mock
}

// AddNotification provides a mock function with given fields: ctx, _a1
func (_m *NotificationStore) AddNotification(ctx context.Context, _a1 model.Notification) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddNotification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Notification) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPendingNotifications provides a mock function with given fields: ctx
func (_m *NotificationStore) GetAllPendingNotifications(ctx context.Context) (map[string][]model.Notification, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPendingNotifications")
	}

	var r0 map[string][]model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]model.Notification, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]model.Notification); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotifications provides a mock function with given fields: ctx, collecitonID
func (_m *NotificationStore) GetNotifications(ctx context.Context, collecitonID string) ([]model.Notification, error) {
	ret := _m.Called(ctx, collecitonID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotifications")
	}

	var r0 []model.Notification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.Notification, error)); ok {
		return rf(ctx, collecitonID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.Notification); ok {
		r0 = rf(ctx, collecitonID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Notification)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collecitonID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveNotifications provides a mock function with given fields: ctx, notifications
func (_m *NotificationStore) RemoveNotifications(ctx context.Context, notifications []model.Notification) error {
	ret := _m.Called(ctx, notifications)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNotifications")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []model.Notification) error); ok {
		r0 = rf(ctx, notifications)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewNotificationStore creates a new instance of NotificationStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationStore {
	mock := &NotificationStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
