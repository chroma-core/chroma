// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	logservicepb "github.com/chroma-core/chroma/go/pkg/proto/logservicepb"

	mock "github.com/stretchr/testify/mock"
)

// LogServiceClient is an autogenerated mock type for the LogServiceClient type
type LogServiceClient struct {
	mock.Mock
}

// GetAllCollectionInfoToCompact provides a mock function with given fields: ctx, in, opts
func (_m *LogServiceClient) GetAllCollectionInfoToCompact(ctx context.Context, in *logservicepb.GetAllCollectionInfoToCompactRequest, opts ...grpc.CallOption) (*logservicepb.GetAllCollectionInfoToCompactResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllCollectionInfoToCompact")
	}

	var r0 *logservicepb.GetAllCollectionInfoToCompactResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest, ...grpc.CallOption) (*logservicepb.GetAllCollectionInfoToCompactResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest, ...grpc.CallOption) *logservicepb.GetAllCollectionInfoToCompactResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.GetAllCollectionInfoToCompactResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.GetAllCollectionInfoToCompactRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullLogs provides a mock function with given fields: ctx, in, opts
func (_m *LogServiceClient) PullLogs(ctx context.Context, in *logservicepb.PullLogsRequest, opts ...grpc.CallOption) (*logservicepb.PullLogsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PullLogs")
	}

	var r0 *logservicepb.PullLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PullLogsRequest, ...grpc.CallOption) (*logservicepb.PullLogsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PullLogsRequest, ...grpc.CallOption) *logservicepb.PullLogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.PullLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.PullLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushLogs provides a mock function with given fields: ctx, in, opts
func (_m *LogServiceClient) PushLogs(ctx context.Context, in *logservicepb.PushLogsRequest, opts ...grpc.CallOption) (*logservicepb.PushLogsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PushLogs")
	}

	var r0 *logservicepb.PushLogsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PushLogsRequest, ...grpc.CallOption) (*logservicepb.PushLogsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.PushLogsRequest, ...grpc.CallOption) *logservicepb.PushLogsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.PushLogsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.PushLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollectionLogOffset provides a mock function with given fields: ctx, in, opts
func (_m *LogServiceClient) UpdateCollectionLogOffset(ctx context.Context, in *logservicepb.UpdateCollectionLogOffsetRequest, opts ...grpc.CallOption) (*logservicepb.UpdateCollectionLogOffsetResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollectionLogOffset")
	}

	var r0 *logservicepb.UpdateCollectionLogOffsetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.UpdateCollectionLogOffsetRequest, ...grpc.CallOption) (*logservicepb.UpdateCollectionLogOffsetResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *logservicepb.UpdateCollectionLogOffsetRequest, ...grpc.CallOption) *logservicepb.UpdateCollectionLogOffsetResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*logservicepb.UpdateCollectionLogOffsetResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *logservicepb.UpdateCollectionLogOffsetRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLogServiceClient creates a new instance of LogServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogServiceClient {
	mock := &LogServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
