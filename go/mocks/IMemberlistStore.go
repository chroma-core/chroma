// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	memberlist_manager "github.com/chroma-core/chroma/go/pkg/memberlist_manager"
	mock "github.com/stretchr/testify/mock"
)

// IMemberlistStore is an autogenerated mock type for the IMemberlistStore type
type IMemberlistStore struct {
	mock.Mock
}

// GetMemberlist provides a mock function with given fields: ctx
func (_m *IMemberlistStore) GetMemberlist(ctx context.Context) (*memberlist_manager.Memberlist, string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberlist")
	}

	var r0 *memberlist_manager.Memberlist
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (*memberlist_manager.Memberlist, string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *memberlist_manager.Memberlist); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memberlist_manager.Memberlist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateMemberlist provides a mock function with given fields: ctx, memberlist, resourceVersion
func (_m *IMemberlistStore) UpdateMemberlist(ctx context.Context, memberlist *memberlist_manager.Memberlist, resourceVersion string) error {
	ret := _m.Called(ctx, memberlist, resourceVersion)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberlist")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *memberlist_manager.Memberlist, string) error); ok {
		r0 = rf(ctx, memberlist, resourceVersion)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMemberlistStore creates a new instance of IMemberlistStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMemberlistStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMemberlistStore {
	mock := &IMemberlistStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
