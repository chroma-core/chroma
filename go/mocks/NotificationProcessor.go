// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	notification "github.com/chroma-core/chroma/go/pkg/notification"
	mock "github.com/stretchr/testify/mock"
)

// NotificationProcessor is an autogenerated mock type for the NotificationProcessor type
type NotificationProcessor struct {
	mock.Mock
}

// Process provides a mock function with given fields: ctx
func (_m *NotificationProcessor) Process(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *NotificationProcessor) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *NotificationProcessor) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Trigger provides a mock function with given fields: ctx, triggerMsg
func (_m *NotificationProcessor) Trigger(ctx context.Context, triggerMsg notification.TriggerMessage) {
	_m.Called(ctx, triggerMsg)
}

// NewNotificationProcessor creates a new instance of NotificationProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationProcessor {
	mock := &NotificationProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
