// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: chromadb/proto/chroma.proto

package coordinatorpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types here should mirror chromadb/types.py
type Operation int32

const (
	Operation_ADD    Operation = 0
	Operation_UPDATE Operation = 1
	Operation_UPSERT Operation = 2
	Operation_DELETE Operation = 3
)

// Enum value maps for Operation.
var (
	Operation_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "UPSERT",
		3: "DELETE",
	}
	Operation_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"UPSERT": 2,
		"DELETE": 3,
	}
)

func (x Operation) Enum() *Operation {
	p := new(Operation)
	*p = x
	return p
}

func (x Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[0].Descriptor()
}

func (Operation) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[0]
}

func (x Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operation.Descriptor instead.
func (Operation) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{0}
}

type ScalarEncoding int32

const (
	ScalarEncoding_FLOAT32 ScalarEncoding = 0
	ScalarEncoding_INT32   ScalarEncoding = 1
)

// Enum value maps for ScalarEncoding.
var (
	ScalarEncoding_name = map[int32]string{
		0: "FLOAT32",
		1: "INT32",
	}
	ScalarEncoding_value = map[string]int32{
		"FLOAT32": 0,
		"INT32":   1,
	}
)

func (x ScalarEncoding) Enum() *ScalarEncoding {
	p := new(ScalarEncoding)
	*p = x
	return p
}

func (x ScalarEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ScalarEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[1].Descriptor()
}

func (ScalarEncoding) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[1]
}

func (x ScalarEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ScalarEncoding.Descriptor instead.
func (ScalarEncoding) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{1}
}

type SegmentScope int32

const (
	SegmentScope_VECTOR   SegmentScope = 0
	SegmentScope_METADATA SegmentScope = 1
	SegmentScope_RECORD   SegmentScope = 2
	SegmentScope_SQLITE   SegmentScope = 3
)

// Enum value maps for SegmentScope.
var (
	SegmentScope_name = map[int32]string{
		0: "VECTOR",
		1: "METADATA",
		2: "RECORD",
		3: "SQLITE",
	}
	SegmentScope_value = map[string]int32{
		"VECTOR":   0,
		"METADATA": 1,
		"RECORD":   2,
		"SQLITE":   3,
	}
)

func (x SegmentScope) Enum() *SegmentScope {
	p := new(SegmentScope)
	*p = x
	return p
}

func (x SegmentScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SegmentScope) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[2].Descriptor()
}

func (SegmentScope) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[2]
}

func (x SegmentScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SegmentScope.Descriptor instead.
func (SegmentScope) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{2}
}

// Types of operators for `WhereDocument` clauses. A `WhereDocument` clause can
// either require that a document contains a value or that it does not contain
// a value.
type WhereDocumentOperator int32

const (
	WhereDocumentOperator_CONTAINS     WhereDocumentOperator = 0
	WhereDocumentOperator_NOT_CONTAINS WhereDocumentOperator = 1
)

// Enum value maps for WhereDocumentOperator.
var (
	WhereDocumentOperator_name = map[int32]string{
		0: "CONTAINS",
		1: "NOT_CONTAINS",
	}
	WhereDocumentOperator_value = map[string]int32{
		"CONTAINS":     0,
		"NOT_CONTAINS": 1,
	}
)

func (x WhereDocumentOperator) Enum() *WhereDocumentOperator {
	p := new(WhereDocumentOperator)
	*p = x
	return p
}

func (x WhereDocumentOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WhereDocumentOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[3].Descriptor()
}

func (WhereDocumentOperator) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[3]
}

func (x WhereDocumentOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WhereDocumentOperator.Descriptor instead.
func (WhereDocumentOperator) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{3}
}

// A `Where` clause may have a list of children. This enum specifies how the
// children should be combined.
type BooleanOperator int32

const (
	BooleanOperator_AND BooleanOperator = 0
	BooleanOperator_OR  BooleanOperator = 1
)

// Enum value maps for BooleanOperator.
var (
	BooleanOperator_name = map[int32]string{
		0: "AND",
		1: "OR",
	}
	BooleanOperator_value = map[string]int32{
		"AND": 0,
		"OR":  1,
	}
)

func (x BooleanOperator) Enum() *BooleanOperator {
	p := new(BooleanOperator)
	*p = x
	return p
}

func (x BooleanOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[4].Descriptor()
}

func (BooleanOperator) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[4]
}

func (x BooleanOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanOperator.Descriptor instead.
func (BooleanOperator) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{4}
}

// A `Where` clause may have a list of allowed or disallowed values. This enum
// specifies which type of list it is.
type ListOperator int32

const (
	ListOperator_IN  ListOperator = 0
	ListOperator_NIN ListOperator = 1
)

// Enum value maps for ListOperator.
var (
	ListOperator_name = map[int32]string{
		0: "IN",
		1: "NIN",
	}
	ListOperator_value = map[string]int32{
		"IN":  0,
		"NIN": 1,
	}
)

func (x ListOperator) Enum() *ListOperator {
	p := new(ListOperator)
	*p = x
	return p
}

func (x ListOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[5].Descriptor()
}

func (ListOperator) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[5]
}

func (x ListOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListOperator.Descriptor instead.
func (ListOperator) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{5}
}

// A leaf-node `Where` clause may compare a string, int, or float to a single
// value of the same type. These comparators apply to all three of those types.
type GenericComparator int32

const (
	GenericComparator_EQ GenericComparator = 0
	GenericComparator_NE GenericComparator = 1
)

// Enum value maps for GenericComparator.
var (
	GenericComparator_name = map[int32]string{
		0: "EQ",
		1: "NE",
	}
	GenericComparator_value = map[string]int32{
		"EQ": 0,
		"NE": 1,
	}
)

func (x GenericComparator) Enum() *GenericComparator {
	p := new(GenericComparator)
	*p = x
	return p
}

func (x GenericComparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenericComparator) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[6].Descriptor()
}

func (GenericComparator) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[6]
}

func (x GenericComparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenericComparator.Descriptor instead.
func (GenericComparator) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{6}
}

// Used when a leaf-node `Where` clause compares an int or float to a single
// value of the same type.
type NumberComparator int32

const (
	NumberComparator_GT  NumberComparator = 0
	NumberComparator_GTE NumberComparator = 1
	NumberComparator_LT  NumberComparator = 2
	NumberComparator_LTE NumberComparator = 3
)

// Enum value maps for NumberComparator.
var (
	NumberComparator_name = map[int32]string{
		0: "GT",
		1: "GTE",
		2: "LT",
		3: "LTE",
	}
	NumberComparator_value = map[string]int32{
		"GT":  0,
		"GTE": 1,
		"LT":  2,
		"LTE": 3,
	}
)

func (x NumberComparator) Enum() *NumberComparator {
	p := new(NumberComparator)
	*p = x
	return p
}

func (x NumberComparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NumberComparator) Descriptor() protoreflect.EnumDescriptor {
	return file_chromadb_proto_chroma_proto_enumTypes[7].Descriptor()
}

func (NumberComparator) Type() protoreflect.EnumType {
	return &file_chromadb_proto_chroma_proto_enumTypes[7]
}

func (x NumberComparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NumberComparator.Descriptor instead.
func (NumberComparator) EnumDescriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{7}
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Code   int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"` // TODO: What is the enum of this code?
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{0}
}

func (x *Status) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

type Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension int32          `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Vector    []byte         `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	Encoding  ScalarEncoding `protobuf:"varint,3,opt,name=encoding,proto3,enum=chroma.ScalarEncoding" json:"encoding,omitempty"`
}

func (x *Vector) Reset() {
	*x = Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{1}
}

func (x *Vector) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *Vector) GetVector() []byte {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *Vector) GetEncoding() ScalarEncoding {
	if x != nil {
		return x.Encoding
	}
	return ScalarEncoding_FLOAT32
}

type FilePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths []string `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
}

func (x *FilePaths) Reset() {
	*x = FilePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePaths) ProtoMessage() {}

func (x *FilePaths) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePaths.ProtoReflect.Descriptor instead.
func (*FilePaths) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{2}
}

func (x *FilePaths) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

type Segment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type       string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Scope      SegmentScope          `protobuf:"varint,3,opt,name=scope,proto3,enum=chroma.SegmentScope" json:"scope,omitempty"`
	Collection *string               `protobuf:"bytes,5,opt,name=collection,proto3,oneof" json:"collection,omitempty"`
	Metadata   *UpdateMetadata       `protobuf:"bytes,6,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	FilePaths  map[string]*FilePaths `protobuf:"bytes,7,rep,name=file_paths,json=filePaths,proto3" json:"file_paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Segment) Reset() {
	*x = Segment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{3}
}

func (x *Segment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Segment) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Segment) GetScope() SegmentScope {
	if x != nil {
		return x.Scope
	}
	return SegmentScope_VECTOR
}

func (x *Segment) GetCollection() string {
	if x != nil && x.Collection != nil {
		return *x.Collection
	}
	return ""
}

func (x *Segment) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Segment) GetFilePaths() map[string]*FilePaths {
	if x != nil {
		return x.FilePaths
	}
	return nil
}

type Collection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Metadata    *UpdateMetadata `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Dimension   *int32          `protobuf:"varint,5,opt,name=dimension,proto3,oneof" json:"dimension,omitempty"`
	Tenant      string          `protobuf:"bytes,6,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Database    string          `protobuf:"bytes,7,opt,name=database,proto3" json:"database,omitempty"`
	LogPosition int64           `protobuf:"varint,8,opt,name=log_position,json=logPosition,proto3" json:"log_position,omitempty"`
	Version     int32           `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Collection) Reset() {
	*x = Collection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collection) ProtoMessage() {}

func (x *Collection) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collection.ProtoReflect.Descriptor instead.
func (*Collection) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{4}
}

func (x *Collection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Collection) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Collection) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Collection) GetDimension() int32 {
	if x != nil && x.Dimension != nil {
		return *x.Dimension
	}
	return 0
}

func (x *Collection) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *Collection) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Collection) GetLogPosition() int64 {
	if x != nil {
		return x.LogPosition
	}
	return 0
}

func (x *Collection) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type Database struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tenant string `protobuf:"bytes,3,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *Database) Reset() {
	*x = Database{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Database) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Database) ProtoMessage() {}

func (x *Database) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Database.ProtoReflect.Descriptor instead.
func (*Database) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{5}
}

func (x *Database) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Database) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Database) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

type Tenant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Tenant) Reset() {
	*x = Tenant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tenant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tenant) ProtoMessage() {}

func (x *Tenant) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tenant.ProtoReflect.Descriptor instead.
func (*Tenant) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{6}
}

func (x *Tenant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateMetadataValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*UpdateMetadataValue_StringValue
	//	*UpdateMetadataValue_IntValue
	//	*UpdateMetadataValue_FloatValue
	Value isUpdateMetadataValue_Value `protobuf_oneof:"value"`
}

func (x *UpdateMetadataValue) Reset() {
	*x = UpdateMetadataValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetadataValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetadataValue) ProtoMessage() {}

func (x *UpdateMetadataValue) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetadataValue.ProtoReflect.Descriptor instead.
func (*UpdateMetadataValue) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{7}
}

func (m *UpdateMetadataValue) GetValue() isUpdateMetadataValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *UpdateMetadataValue) GetStringValue() string {
	if x, ok := x.GetValue().(*UpdateMetadataValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *UpdateMetadataValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*UpdateMetadataValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *UpdateMetadataValue) GetFloatValue() float64 {
	if x, ok := x.GetValue().(*UpdateMetadataValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

type isUpdateMetadataValue_Value interface {
	isUpdateMetadataValue_Value()
}

type UpdateMetadataValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type UpdateMetadataValue_IntValue struct {
	IntValue int64 `protobuf:"varint,2,opt,name=int_value,json=intValue,proto3,oneof"`
}

type UpdateMetadataValue_FloatValue struct {
	FloatValue float64 `protobuf:"fixed64,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

func (*UpdateMetadataValue_StringValue) isUpdateMetadataValue_Value() {}

func (*UpdateMetadataValue_IntValue) isUpdateMetadataValue_Value() {}

func (*UpdateMetadataValue_FloatValue) isUpdateMetadataValue_Value() {}

type UpdateMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]*UpdateMetadataValue `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateMetadata) Reset() {
	*x = UpdateMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetadata) ProtoMessage() {}

func (x *UpdateMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetadata.ProtoReflect.Descriptor instead.
func (*UpdateMetadata) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateMetadata) GetMetadata() map[string]*UpdateMetadataValue {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Represents an operation the user submits
type OperationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector    *Vector         `protobuf:"bytes,2,opt,name=vector,proto3,oneof" json:"vector,omitempty"`
	Metadata  *UpdateMetadata `protobuf:"bytes,3,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	Operation Operation       `protobuf:"varint,4,opt,name=operation,proto3,enum=chroma.Operation" json:"operation,omitempty"`
}

func (x *OperationRecord) Reset() {
	*x = OperationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationRecord) ProtoMessage() {}

func (x *OperationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationRecord.ProtoReflect.Descriptor instead.
func (*OperationRecord) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{9}
}

func (x *OperationRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationRecord) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *OperationRecord) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *OperationRecord) GetOperation() Operation {
	if x != nil {
		return x.Operation
	}
	return Operation_ADD
}

type QueryMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentId     string         `protobuf:"bytes,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	Where         *Where         `protobuf:"bytes,2,opt,name=where,proto3" json:"where,omitempty"`
	WhereDocument *WhereDocument `protobuf:"bytes,3,opt,name=where_document,json=whereDocument,proto3" json:"where_document,omitempty"`
	Ids           []string       `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
	Limit         *int32         `protobuf:"varint,5,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	Offset        *int32         `protobuf:"varint,6,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
}

func (x *QueryMetadataRequest) Reset() {
	*x = QueryMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetadataRequest) ProtoMessage() {}

func (x *QueryMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetadataRequest.ProtoReflect.Descriptor instead.
func (*QueryMetadataRequest) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{10}
}

func (x *QueryMetadataRequest) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

func (x *QueryMetadataRequest) GetWhere() *Where {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *QueryMetadataRequest) GetWhereDocument() *WhereDocument {
	if x != nil {
		return x.WhereDocument
	}
	return nil
}

func (x *QueryMetadataRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *QueryMetadataRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *QueryMetadataRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

type QueryMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*MetadataEmbeddingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *QueryMetadataResponse) Reset() {
	*x = QueryMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryMetadataResponse) ProtoMessage() {}

func (x *QueryMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryMetadataResponse.ProtoReflect.Descriptor instead.
func (*QueryMetadataResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{11}
}

func (x *QueryMetadataResponse) GetRecords() []*MetadataEmbeddingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type MetadataEmbeddingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metadata *UpdateMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MetadataEmbeddingRecord) Reset() {
	*x = MetadataEmbeddingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataEmbeddingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataEmbeddingRecord) ProtoMessage() {}

func (x *MetadataEmbeddingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataEmbeddingRecord.ProtoReflect.Descriptor instead.
func (*MetadataEmbeddingRecord) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{12}
}

func (x *MetadataEmbeddingRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MetadataEmbeddingRecord) GetMetadata() *UpdateMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// A `WhereDocument` clause for filtering metadata. A `WhereDocument` clause is a tree of
// `WhereDocument` clauses, where each node is exactly one of:
// - A leaf node representing a `$contains` or `$not_contains` query directly.
// - An branch node with a list of children and a way to combine them (AND or OR).
type WhereDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to WhereDocument:
	//
	//	*WhereDocument_Direct
	//	*WhereDocument_Children
	WhereDocument isWhereDocument_WhereDocument `protobuf_oneof:"where_document"`
}

func (x *WhereDocument) Reset() {
	*x = WhereDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereDocument) ProtoMessage() {}

func (x *WhereDocument) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereDocument.ProtoReflect.Descriptor instead.
func (*WhereDocument) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{13}
}

func (m *WhereDocument) GetWhereDocument() isWhereDocument_WhereDocument {
	if m != nil {
		return m.WhereDocument
	}
	return nil
}

func (x *WhereDocument) GetDirect() *DirectWhereDocument {
	if x, ok := x.GetWhereDocument().(*WhereDocument_Direct); ok {
		return x.Direct
	}
	return nil
}

func (x *WhereDocument) GetChildren() *WhereDocumentChildren {
	if x, ok := x.GetWhereDocument().(*WhereDocument_Children); ok {
		return x.Children
	}
	return nil
}

type isWhereDocument_WhereDocument interface {
	isWhereDocument_WhereDocument()
}

type WhereDocument_Direct struct {
	Direct *DirectWhereDocument `protobuf:"bytes,1,opt,name=direct,proto3,oneof"`
}

type WhereDocument_Children struct {
	Children *WhereDocumentChildren `protobuf:"bytes,2,opt,name=children,proto3,oneof"`
}

func (*WhereDocument_Direct) isWhereDocument_WhereDocument() {}

func (*WhereDocument_Children) isWhereDocument_WhereDocument() {}

// A leaf-node `WhereDocument` clause may compare a document to a single value.
type DirectWhereDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Document string                `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"`
	Operator WhereDocumentOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=chroma.WhereDocumentOperator" json:"operator,omitempty"`
}

func (x *DirectWhereDocument) Reset() {
	*x = DirectWhereDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectWhereDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectWhereDocument) ProtoMessage() {}

func (x *DirectWhereDocument) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectWhereDocument.ProtoReflect.Descriptor instead.
func (*DirectWhereDocument) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{14}
}

func (x *DirectWhereDocument) GetDocument() string {
	if x != nil {
		return x.Document
	}
	return ""
}

func (x *DirectWhereDocument) GetOperator() WhereDocumentOperator {
	if x != nil {
		return x.Operator
	}
	return WhereDocumentOperator_CONTAINS
}

// A branch-node `WhereDocument` node has a list of children.
type WhereDocumentChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*WhereDocument `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Operator BooleanOperator  `protobuf:"varint,2,opt,name=operator,proto3,enum=chroma.BooleanOperator" json:"operator,omitempty"`
}

func (x *WhereDocumentChildren) Reset() {
	*x = WhereDocumentChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereDocumentChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereDocumentChildren) ProtoMessage() {}

func (x *WhereDocumentChildren) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereDocumentChildren.ProtoReflect.Descriptor instead.
func (*WhereDocumentChildren) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{15}
}

func (x *WhereDocumentChildren) GetChildren() []*WhereDocument {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *WhereDocumentChildren) GetOperator() BooleanOperator {
	if x != nil {
		return x.Operator
	}
	return BooleanOperator_AND
}

// A `Where` clause for filtering metadata. A `Where` clause is a tree of
// `Where` clauses, where each node is exactly one of:
//   - A leaf node representing a direct comparison between a metadata key and a
//     value or list of values.
//   - An branch node with a list of children and a way to combine them (AND or OR).
type Where struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Where:
	//
	//	*Where_DirectComparison
	//	*Where_Children
	Where isWhere_Where `protobuf_oneof:"where"`
}

func (x *Where) Reset() {
	*x = Where{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Where) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Where) ProtoMessage() {}

func (x *Where) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Where.ProtoReflect.Descriptor instead.
func (*Where) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{16}
}

func (m *Where) GetWhere() isWhere_Where {
	if m != nil {
		return m.Where
	}
	return nil
}

func (x *Where) GetDirectComparison() *DirectComparison {
	if x, ok := x.GetWhere().(*Where_DirectComparison); ok {
		return x.DirectComparison
	}
	return nil
}

func (x *Where) GetChildren() *WhereChildren {
	if x, ok := x.GetWhere().(*Where_Children); ok {
		return x.Children
	}
	return nil
}

type isWhere_Where interface {
	isWhere_Where()
}

type Where_DirectComparison struct {
	DirectComparison *DirectComparison `protobuf:"bytes,1,opt,name=direct_comparison,json=directComparison,proto3,oneof"`
}

type Where_Children struct {
	Children *WhereChildren `protobuf:"bytes,2,opt,name=children,proto3,oneof"`
}

func (*Where_DirectComparison) isWhere_Where() {}

func (*Where_Children) isWhere_Where() {}

// A leaf-node `Where` clause.
type DirectComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Comparison:
	//
	//	*DirectComparison_SingleStringOperand
	//	*DirectComparison_StringListOperand
	//	*DirectComparison_SingleIntOperand
	//	*DirectComparison_IntListOperand
	//	*DirectComparison_SingleDoubleOperand
	//	*DirectComparison_DoubleListOperand
	Comparison isDirectComparison_Comparison `protobuf_oneof:"comparison"`
}

func (x *DirectComparison) Reset() {
	*x = DirectComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectComparison) ProtoMessage() {}

func (x *DirectComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectComparison.ProtoReflect.Descriptor instead.
func (*DirectComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{17}
}

func (x *DirectComparison) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *DirectComparison) GetComparison() isDirectComparison_Comparison {
	if m != nil {
		return m.Comparison
	}
	return nil
}

func (x *DirectComparison) GetSingleStringOperand() *SingleStringComparison {
	if x, ok := x.GetComparison().(*DirectComparison_SingleStringOperand); ok {
		return x.SingleStringOperand
	}
	return nil
}

func (x *DirectComparison) GetStringListOperand() *StringListComparison {
	if x, ok := x.GetComparison().(*DirectComparison_StringListOperand); ok {
		return x.StringListOperand
	}
	return nil
}

func (x *DirectComparison) GetSingleIntOperand() *SingleIntComparison {
	if x, ok := x.GetComparison().(*DirectComparison_SingleIntOperand); ok {
		return x.SingleIntOperand
	}
	return nil
}

func (x *DirectComparison) GetIntListOperand() *IntListComparison {
	if x, ok := x.GetComparison().(*DirectComparison_IntListOperand); ok {
		return x.IntListOperand
	}
	return nil
}

func (x *DirectComparison) GetSingleDoubleOperand() *SingleDoubleComparison {
	if x, ok := x.GetComparison().(*DirectComparison_SingleDoubleOperand); ok {
		return x.SingleDoubleOperand
	}
	return nil
}

func (x *DirectComparison) GetDoubleListOperand() *DoubleListComparison {
	if x, ok := x.GetComparison().(*DirectComparison_DoubleListOperand); ok {
		return x.DoubleListOperand
	}
	return nil
}

type isDirectComparison_Comparison interface {
	isDirectComparison_Comparison()
}

type DirectComparison_SingleStringOperand struct {
	SingleStringOperand *SingleStringComparison `protobuf:"bytes,2,opt,name=single_string_operand,json=singleStringOperand,proto3,oneof"`
}

type DirectComparison_StringListOperand struct {
	StringListOperand *StringListComparison `protobuf:"bytes,3,opt,name=string_list_operand,json=stringListOperand,proto3,oneof"`
}

type DirectComparison_SingleIntOperand struct {
	SingleIntOperand *SingleIntComparison `protobuf:"bytes,4,opt,name=single_int_operand,json=singleIntOperand,proto3,oneof"`
}

type DirectComparison_IntListOperand struct {
	IntListOperand *IntListComparison `protobuf:"bytes,5,opt,name=int_list_operand,json=intListOperand,proto3,oneof"`
}

type DirectComparison_SingleDoubleOperand struct {
	SingleDoubleOperand *SingleDoubleComparison `protobuf:"bytes,6,opt,name=single_double_operand,json=singleDoubleOperand,proto3,oneof"`
}

type DirectComparison_DoubleListOperand struct {
	DoubleListOperand *DoubleListComparison `protobuf:"bytes,7,opt,name=double_list_operand,json=doubleListOperand,proto3,oneof"`
}

func (*DirectComparison_SingleStringOperand) isDirectComparison_Comparison() {}

func (*DirectComparison_StringListOperand) isDirectComparison_Comparison() {}

func (*DirectComparison_SingleIntOperand) isDirectComparison_Comparison() {}

func (*DirectComparison_IntListOperand) isDirectComparison_Comparison() {}

func (*DirectComparison_SingleDoubleOperand) isDirectComparison_Comparison() {}

func (*DirectComparison_DoubleListOperand) isDirectComparison_Comparison() {}

// A branch-node `Where` clause has a list of children and a specification
// for how to combine them.
type WhereChildren struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children []*Where        `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Operator BooleanOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=chroma.BooleanOperator" json:"operator,omitempty"`
}

func (x *WhereChildren) Reset() {
	*x = WhereChildren{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhereChildren) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhereChildren) ProtoMessage() {}

func (x *WhereChildren) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhereChildren.ProtoReflect.Descriptor instead.
func (*WhereChildren) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{18}
}

func (x *WhereChildren) GetChildren() []*Where {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *WhereChildren) GetOperator() BooleanOperator {
	if x != nil {
		return x.Operator
	}
	return BooleanOperator_AND
}

// Used when a leaf-node `Where` clause compares a string to a list of strings.
// `ListOperator` specifies whether values in the list are allowed or disallowed.
type StringListComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values       []string     `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	ListOperator ListOperator `protobuf:"varint,2,opt,name=list_operator,json=listOperator,proto3,enum=chroma.ListOperator" json:"list_operator,omitempty"`
}

func (x *StringListComparison) Reset() {
	*x = StringListComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringListComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringListComparison) ProtoMessage() {}

func (x *StringListComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringListComparison.ProtoReflect.Descriptor instead.
func (*StringListComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{19}
}

func (x *StringListComparison) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *StringListComparison) GetListOperator() ListOperator {
	if x != nil {
		return x.ListOperator
	}
	return ListOperator_IN
}

// Used when a leaf-node `Where` clause compares a string to a single string.
type SingleStringComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value      string            `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Comparator GenericComparator `protobuf:"varint,2,opt,name=comparator,proto3,enum=chroma.GenericComparator" json:"comparator,omitempty"`
}

func (x *SingleStringComparison) Reset() {
	*x = SingleStringComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleStringComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleStringComparison) ProtoMessage() {}

func (x *SingleStringComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleStringComparison.ProtoReflect.Descriptor instead.
func (*SingleStringComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{20}
}

func (x *SingleStringComparison) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SingleStringComparison) GetComparator() GenericComparator {
	if x != nil {
		return x.Comparator
	}
	return GenericComparator_EQ
}

// Used when a leaf-node `Where` clause compares an int to a list of ints.
// `ListOperator` specifies whether values in the list are allowed or disallowed.
type IntListComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values       []int64      `protobuf:"varint,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	ListOperator ListOperator `protobuf:"varint,2,opt,name=list_operator,json=listOperator,proto3,enum=chroma.ListOperator" json:"list_operator,omitempty"`
}

func (x *IntListComparison) Reset() {
	*x = IntListComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntListComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntListComparison) ProtoMessage() {}

func (x *IntListComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntListComparison.ProtoReflect.Descriptor instead.
func (*IntListComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{21}
}

func (x *IntListComparison) GetValues() []int64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *IntListComparison) GetListOperator() ListOperator {
	if x != nil {
		return x.ListOperator
	}
	return ListOperator_IN
}

// Used when a leaf-node `Where` clause compares an int to a single int.
type SingleIntComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// Types that are assignable to Comparator:
	//
	//	*SingleIntComparison_GenericComparator
	//	*SingleIntComparison_NumberComparator
	Comparator isSingleIntComparison_Comparator `protobuf_oneof:"comparator"`
}

func (x *SingleIntComparison) Reset() {
	*x = SingleIntComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleIntComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleIntComparison) ProtoMessage() {}

func (x *SingleIntComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleIntComparison.ProtoReflect.Descriptor instead.
func (*SingleIntComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{22}
}

func (x *SingleIntComparison) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (m *SingleIntComparison) GetComparator() isSingleIntComparison_Comparator {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (x *SingleIntComparison) GetGenericComparator() GenericComparator {
	if x, ok := x.GetComparator().(*SingleIntComparison_GenericComparator); ok {
		return x.GenericComparator
	}
	return GenericComparator_EQ
}

func (x *SingleIntComparison) GetNumberComparator() NumberComparator {
	if x, ok := x.GetComparator().(*SingleIntComparison_NumberComparator); ok {
		return x.NumberComparator
	}
	return NumberComparator_GT
}

type isSingleIntComparison_Comparator interface {
	isSingleIntComparison_Comparator()
}

type SingleIntComparison_GenericComparator struct {
	GenericComparator GenericComparator `protobuf:"varint,2,opt,name=generic_comparator,json=genericComparator,proto3,enum=chroma.GenericComparator,oneof"`
}

type SingleIntComparison_NumberComparator struct {
	NumberComparator NumberComparator `protobuf:"varint,3,opt,name=number_comparator,json=numberComparator,proto3,enum=chroma.NumberComparator,oneof"`
}

func (*SingleIntComparison_GenericComparator) isSingleIntComparison_Comparator() {}

func (*SingleIntComparison_NumberComparator) isSingleIntComparison_Comparator() {}

// Used when a leaf-node `Where` clause compares a float to a list of floats.
// `ListOperator` specifies whether values in the list are allowed or disallowed.
type DoubleListComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values       []float64    `protobuf:"fixed64,1,rep,packed,name=values,proto3" json:"values,omitempty"`
	ListOperator ListOperator `protobuf:"varint,2,opt,name=list_operator,json=listOperator,proto3,enum=chroma.ListOperator" json:"list_operator,omitempty"`
}

func (x *DoubleListComparison) Reset() {
	*x = DoubleListComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleListComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleListComparison) ProtoMessage() {}

func (x *DoubleListComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleListComparison.ProtoReflect.Descriptor instead.
func (*DoubleListComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{23}
}

func (x *DoubleListComparison) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *DoubleListComparison) GetListOperator() ListOperator {
	if x != nil {
		return x.ListOperator
	}
	return ListOperator_IN
}

type SingleDoubleComparison struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Types that are assignable to Comparator:
	//
	//	*SingleDoubleComparison_GenericComparator
	//	*SingleDoubleComparison_NumberComparator
	Comparator isSingleDoubleComparison_Comparator `protobuf_oneof:"comparator"`
}

func (x *SingleDoubleComparison) Reset() {
	*x = SingleDoubleComparison{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SingleDoubleComparison) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SingleDoubleComparison) ProtoMessage() {}

func (x *SingleDoubleComparison) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SingleDoubleComparison.ProtoReflect.Descriptor instead.
func (*SingleDoubleComparison) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{24}
}

func (x *SingleDoubleComparison) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (m *SingleDoubleComparison) GetComparator() isSingleDoubleComparison_Comparator {
	if m != nil {
		return m.Comparator
	}
	return nil
}

func (x *SingleDoubleComparison) GetGenericComparator() GenericComparator {
	if x, ok := x.GetComparator().(*SingleDoubleComparison_GenericComparator); ok {
		return x.GenericComparator
	}
	return GenericComparator_EQ
}

func (x *SingleDoubleComparison) GetNumberComparator() NumberComparator {
	if x, ok := x.GetComparator().(*SingleDoubleComparison_NumberComparator); ok {
		return x.NumberComparator
	}
	return NumberComparator_GT
}

type isSingleDoubleComparison_Comparator interface {
	isSingleDoubleComparison_Comparator()
}

type SingleDoubleComparison_GenericComparator struct {
	GenericComparator GenericComparator `protobuf:"varint,2,opt,name=generic_comparator,json=genericComparator,proto3,enum=chroma.GenericComparator,oneof"`
}

type SingleDoubleComparison_NumberComparator struct {
	NumberComparator NumberComparator `protobuf:"varint,3,opt,name=number_comparator,json=numberComparator,proto3,enum=chroma.NumberComparator,oneof"`
}

func (*SingleDoubleComparison_GenericComparator) isSingleDoubleComparison_Comparator() {}

func (*SingleDoubleComparison_NumberComparator) isSingleDoubleComparison_Comparator() {}

type GetVectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids       []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	SegmentId string   `protobuf:"bytes,2,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
}

func (x *GetVectorsRequest) Reset() {
	*x = GetVectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorsRequest) ProtoMessage() {}

func (x *GetVectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorsRequest.ProtoReflect.Descriptor instead.
func (*GetVectorsRequest) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{25}
}

func (x *GetVectorsRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetVectorsRequest) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

type GetVectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Records []*VectorEmbeddingRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
}

func (x *GetVectorsResponse) Reset() {
	*x = GetVectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVectorsResponse) ProtoMessage() {}

func (x *GetVectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVectorsResponse.ProtoReflect.Descriptor instead.
func (*GetVectorsResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{26}
}

func (x *GetVectorsResponse) GetRecords() []*VectorEmbeddingRecord {
	if x != nil {
		return x.Records
	}
	return nil
}

type VectorEmbeddingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vector *Vector `protobuf:"bytes,3,opt,name=vector,proto3" json:"vector,omitempty"` // TODO: we need to rethink source of truth for vector dimensionality and encoding
}

func (x *VectorEmbeddingRecord) Reset() {
	*x = VectorEmbeddingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorEmbeddingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorEmbeddingRecord) ProtoMessage() {}

func (x *VectorEmbeddingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorEmbeddingRecord.ProtoReflect.Descriptor instead.
func (*VectorEmbeddingRecord) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{27}
}

func (x *VectorEmbeddingRecord) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorEmbeddingRecord) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type QueryVectorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vectors           []*Vector `protobuf:"bytes,1,rep,name=vectors,proto3" json:"vectors,omitempty"`
	K                 int32     `protobuf:"varint,2,opt,name=k,proto3" json:"k,omitempty"`
	AllowedIds        []string  `protobuf:"bytes,3,rep,name=allowed_ids,json=allowedIds,proto3" json:"allowed_ids,omitempty"`
	IncludeEmbeddings bool      `protobuf:"varint,4,opt,name=include_embeddings,json=includeEmbeddings,proto3" json:"include_embeddings,omitempty"`
	SegmentId         string    `protobuf:"bytes,5,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"` // TODO: options as in types.py, its currently unused so can add later
}

func (x *QueryVectorsRequest) Reset() {
	*x = QueryVectorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVectorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVectorsRequest) ProtoMessage() {}

func (x *QueryVectorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVectorsRequest.ProtoReflect.Descriptor instead.
func (*QueryVectorsRequest) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{28}
}

func (x *QueryVectorsRequest) GetVectors() []*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *QueryVectorsRequest) GetK() int32 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *QueryVectorsRequest) GetAllowedIds() []string {
	if x != nil {
		return x.AllowedIds
	}
	return nil
}

func (x *QueryVectorsRequest) GetIncludeEmbeddings() bool {
	if x != nil {
		return x.IncludeEmbeddings
	}
	return false
}

func (x *QueryVectorsRequest) GetSegmentId() string {
	if x != nil {
		return x.SegmentId
	}
	return ""
}

type QueryVectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VectorQueryResults `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *QueryVectorsResponse) Reset() {
	*x = QueryVectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryVectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryVectorsResponse) ProtoMessage() {}

func (x *QueryVectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryVectorsResponse.ProtoReflect.Descriptor instead.
func (*QueryVectorsResponse) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{29}
}

func (x *QueryVectorsResponse) GetResults() []*VectorQueryResults {
	if x != nil {
		return x.Results
	}
	return nil
}

type VectorQueryResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*VectorQueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *VectorQueryResults) Reset() {
	*x = VectorQueryResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQueryResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQueryResults) ProtoMessage() {}

func (x *VectorQueryResults) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQueryResults.ProtoReflect.Descriptor instead.
func (*VectorQueryResults) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{30}
}

func (x *VectorQueryResults) GetResults() []*VectorQueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type VectorQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Distance float32 `protobuf:"fixed32,3,opt,name=distance,proto3" json:"distance,omitempty"`
	Vector   *Vector `protobuf:"bytes,4,opt,name=vector,proto3,oneof" json:"vector,omitempty"`
}

func (x *VectorQueryResult) Reset() {
	*x = VectorQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chromadb_proto_chroma_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorQueryResult) ProtoMessage() {}

func (x *VectorQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_chromadb_proto_chroma_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorQueryResult.ProtoReflect.Descriptor instead.
func (*VectorQueryResult) Descriptor() ([]byte, []int) {
	return file_chromadb_proto_chroma_proto_rawDescGZIP(), []int{31}
}

func (x *VectorQueryResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VectorQueryResult) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *VectorQueryResult) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

var File_chromadb_proto_chroma_proto protoreflect.FileDescriptor

var file_chromadb_proto_chroma_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x64, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x22, 0x34, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x06, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22,
	0x21, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x22, 0xe3, 0x02, 0x0a, 0x07, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x4f, 0x0a, 0x0e, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x06, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xac, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x58, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd0, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf7, 0x01, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x77,
	0x68, 0x65, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x12, 0x3c, 0x0a, 0x0e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0d, 0x77, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x52, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x5d, 0x0a, 0x17, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x95, 0x01, 0x0a, 0x0d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x63, 0x68, 0x69,
	0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x13, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x15, 0x57, 0x68, 0x65, 0x72, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8e, 0x01, 0x0a, 0x05, 0x57, 0x68, 0x65, 0x72,
	0x65, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x42,
	0x07, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x22, 0x92, 0x04, 0x0a, 0x10, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x54, 0x0a, 0x15, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x54, 0x0a, 0x15, 0x73, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x12,
	0x4e, 0x0a, 0x13, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a,
	0x0d, 0x57, 0x68, 0x65, 0x72, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x29,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x57, 0x68, 0x65, 0x72, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x69,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x69, 0x0a, 0x16, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x66, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x61, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c,
	0x6c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a,
	0x13, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x69, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x69, 0x0a,
	0x14, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a,
	0x0d, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x6c, 0x69, 0x73, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4a, 0x0a, 0x12, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x44, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x22, 0x4f, 0x0a, 0x15, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x76, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x49, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x77, 0x0a, 0x11, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x68,
	0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x06, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2a, 0x38, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x28, 0x0a,
	0x0e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x2a, 0x40, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x51, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x37, 0x0a, 0x15, 0x57, 0x68, 0x65,
	0x72, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53,
	0x10, 0x01, 0x2a, 0x22, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x4f, 0x52, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x49, 0x4e, 0x10, 0x01, 0x2a, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x06, 0x0a, 0x02,
	0x45, 0x51, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x34, 0x0a, 0x10,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x54, 0x45,
	0x10, 0x03, 0x32, 0x60, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xa2, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x61, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2d, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x61, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chromadb_proto_chroma_proto_rawDescOnce sync.Once
	file_chromadb_proto_chroma_proto_rawDescData = file_chromadb_proto_chroma_proto_rawDesc
)

func file_chromadb_proto_chroma_proto_rawDescGZIP() []byte {
	file_chromadb_proto_chroma_proto_rawDescOnce.Do(func() {
		file_chromadb_proto_chroma_proto_rawDescData = protoimpl.X.CompressGZIP(file_chromadb_proto_chroma_proto_rawDescData)
	})
	return file_chromadb_proto_chroma_proto_rawDescData
}

var file_chromadb_proto_chroma_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_chromadb_proto_chroma_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_chromadb_proto_chroma_proto_goTypes = []interface{}{
	(Operation)(0),                  // 0: chroma.Operation
	(ScalarEncoding)(0),             // 1: chroma.ScalarEncoding
	(SegmentScope)(0),               // 2: chroma.SegmentScope
	(WhereDocumentOperator)(0),      // 3: chroma.WhereDocumentOperator
	(BooleanOperator)(0),            // 4: chroma.BooleanOperator
	(ListOperator)(0),               // 5: chroma.ListOperator
	(GenericComparator)(0),          // 6: chroma.GenericComparator
	(NumberComparator)(0),           // 7: chroma.NumberComparator
	(*Status)(nil),                  // 8: chroma.Status
	(*Vector)(nil),                  // 9: chroma.Vector
	(*FilePaths)(nil),               // 10: chroma.FilePaths
	(*Segment)(nil),                 // 11: chroma.Segment
	(*Collection)(nil),              // 12: chroma.Collection
	(*Database)(nil),                // 13: chroma.Database
	(*Tenant)(nil),                  // 14: chroma.Tenant
	(*UpdateMetadataValue)(nil),     // 15: chroma.UpdateMetadataValue
	(*UpdateMetadata)(nil),          // 16: chroma.UpdateMetadata
	(*OperationRecord)(nil),         // 17: chroma.OperationRecord
	(*QueryMetadataRequest)(nil),    // 18: chroma.QueryMetadataRequest
	(*QueryMetadataResponse)(nil),   // 19: chroma.QueryMetadataResponse
	(*MetadataEmbeddingRecord)(nil), // 20: chroma.MetadataEmbeddingRecord
	(*WhereDocument)(nil),           // 21: chroma.WhereDocument
	(*DirectWhereDocument)(nil),     // 22: chroma.DirectWhereDocument
	(*WhereDocumentChildren)(nil),   // 23: chroma.WhereDocumentChildren
	(*Where)(nil),                   // 24: chroma.Where
	(*DirectComparison)(nil),        // 25: chroma.DirectComparison
	(*WhereChildren)(nil),           // 26: chroma.WhereChildren
	(*StringListComparison)(nil),    // 27: chroma.StringListComparison
	(*SingleStringComparison)(nil),  // 28: chroma.SingleStringComparison
	(*IntListComparison)(nil),       // 29: chroma.IntListComparison
	(*SingleIntComparison)(nil),     // 30: chroma.SingleIntComparison
	(*DoubleListComparison)(nil),    // 31: chroma.DoubleListComparison
	(*SingleDoubleComparison)(nil),  // 32: chroma.SingleDoubleComparison
	(*GetVectorsRequest)(nil),       // 33: chroma.GetVectorsRequest
	(*GetVectorsResponse)(nil),      // 34: chroma.GetVectorsResponse
	(*VectorEmbeddingRecord)(nil),   // 35: chroma.VectorEmbeddingRecord
	(*QueryVectorsRequest)(nil),     // 36: chroma.QueryVectorsRequest
	(*QueryVectorsResponse)(nil),    // 37: chroma.QueryVectorsResponse
	(*VectorQueryResults)(nil),      // 38: chroma.VectorQueryResults
	(*VectorQueryResult)(nil),       // 39: chroma.VectorQueryResult
	nil,                             // 40: chroma.Segment.FilePathsEntry
	nil,                             // 41: chroma.UpdateMetadata.MetadataEntry
}
var file_chromadb_proto_chroma_proto_depIdxs = []int32{
	1,  // 0: chroma.Vector.encoding:type_name -> chroma.ScalarEncoding
	2,  // 1: chroma.Segment.scope:type_name -> chroma.SegmentScope
	16, // 2: chroma.Segment.metadata:type_name -> chroma.UpdateMetadata
	40, // 3: chroma.Segment.file_paths:type_name -> chroma.Segment.FilePathsEntry
	16, // 4: chroma.Collection.metadata:type_name -> chroma.UpdateMetadata
	41, // 5: chroma.UpdateMetadata.metadata:type_name -> chroma.UpdateMetadata.MetadataEntry
	9,  // 6: chroma.OperationRecord.vector:type_name -> chroma.Vector
	16, // 7: chroma.OperationRecord.metadata:type_name -> chroma.UpdateMetadata
	0,  // 8: chroma.OperationRecord.operation:type_name -> chroma.Operation
	24, // 9: chroma.QueryMetadataRequest.where:type_name -> chroma.Where
	21, // 10: chroma.QueryMetadataRequest.where_document:type_name -> chroma.WhereDocument
	20, // 11: chroma.QueryMetadataResponse.records:type_name -> chroma.MetadataEmbeddingRecord
	16, // 12: chroma.MetadataEmbeddingRecord.metadata:type_name -> chroma.UpdateMetadata
	22, // 13: chroma.WhereDocument.direct:type_name -> chroma.DirectWhereDocument
	23, // 14: chroma.WhereDocument.children:type_name -> chroma.WhereDocumentChildren
	3,  // 15: chroma.DirectWhereDocument.operator:type_name -> chroma.WhereDocumentOperator
	21, // 16: chroma.WhereDocumentChildren.children:type_name -> chroma.WhereDocument
	4,  // 17: chroma.WhereDocumentChildren.operator:type_name -> chroma.BooleanOperator
	25, // 18: chroma.Where.direct_comparison:type_name -> chroma.DirectComparison
	26, // 19: chroma.Where.children:type_name -> chroma.WhereChildren
	28, // 20: chroma.DirectComparison.single_string_operand:type_name -> chroma.SingleStringComparison
	27, // 21: chroma.DirectComparison.string_list_operand:type_name -> chroma.StringListComparison
	30, // 22: chroma.DirectComparison.single_int_operand:type_name -> chroma.SingleIntComparison
	29, // 23: chroma.DirectComparison.int_list_operand:type_name -> chroma.IntListComparison
	32, // 24: chroma.DirectComparison.single_double_operand:type_name -> chroma.SingleDoubleComparison
	31, // 25: chroma.DirectComparison.double_list_operand:type_name -> chroma.DoubleListComparison
	24, // 26: chroma.WhereChildren.children:type_name -> chroma.Where
	4,  // 27: chroma.WhereChildren.operator:type_name -> chroma.BooleanOperator
	5,  // 28: chroma.StringListComparison.list_operator:type_name -> chroma.ListOperator
	6,  // 29: chroma.SingleStringComparison.comparator:type_name -> chroma.GenericComparator
	5,  // 30: chroma.IntListComparison.list_operator:type_name -> chroma.ListOperator
	6,  // 31: chroma.SingleIntComparison.generic_comparator:type_name -> chroma.GenericComparator
	7,  // 32: chroma.SingleIntComparison.number_comparator:type_name -> chroma.NumberComparator
	5,  // 33: chroma.DoubleListComparison.list_operator:type_name -> chroma.ListOperator
	6,  // 34: chroma.SingleDoubleComparison.generic_comparator:type_name -> chroma.GenericComparator
	7,  // 35: chroma.SingleDoubleComparison.number_comparator:type_name -> chroma.NumberComparator
	35, // 36: chroma.GetVectorsResponse.records:type_name -> chroma.VectorEmbeddingRecord
	9,  // 37: chroma.VectorEmbeddingRecord.vector:type_name -> chroma.Vector
	9,  // 38: chroma.QueryVectorsRequest.vectors:type_name -> chroma.Vector
	38, // 39: chroma.QueryVectorsResponse.results:type_name -> chroma.VectorQueryResults
	39, // 40: chroma.VectorQueryResults.results:type_name -> chroma.VectorQueryResult
	9,  // 41: chroma.VectorQueryResult.vector:type_name -> chroma.Vector
	10, // 42: chroma.Segment.FilePathsEntry.value:type_name -> chroma.FilePaths
	15, // 43: chroma.UpdateMetadata.MetadataEntry.value:type_name -> chroma.UpdateMetadataValue
	18, // 44: chroma.MetadataReader.QueryMetadata:input_type -> chroma.QueryMetadataRequest
	33, // 45: chroma.VectorReader.GetVectors:input_type -> chroma.GetVectorsRequest
	36, // 46: chroma.VectorReader.QueryVectors:input_type -> chroma.QueryVectorsRequest
	19, // 47: chroma.MetadataReader.QueryMetadata:output_type -> chroma.QueryMetadataResponse
	34, // 48: chroma.VectorReader.GetVectors:output_type -> chroma.GetVectorsResponse
	37, // 49: chroma.VectorReader.QueryVectors:output_type -> chroma.QueryVectorsResponse
	47, // [47:50] is the sub-list for method output_type
	44, // [44:47] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_chromadb_proto_chroma_proto_init() }
func file_chromadb_proto_chroma_proto_init() {
	if File_chromadb_proto_chroma_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chromadb_proto_chroma_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Segment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Database); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tenant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetadataValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataEmbeddingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectWhereDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereDocumentChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Where); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhereChildren); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringListComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleStringComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntListComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleIntComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleListComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SingleDoubleComparison); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorEmbeddingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVectorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryVectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQueryResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chromadb_proto_chroma_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chromadb_proto_chroma_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*UpdateMetadataValue_StringValue)(nil),
		(*UpdateMetadataValue_IntValue)(nil),
		(*UpdateMetadataValue_FloatValue)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_chromadb_proto_chroma_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*WhereDocument_Direct)(nil),
		(*WhereDocument_Children)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Where_DirectComparison)(nil),
		(*Where_Children)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DirectComparison_SingleStringOperand)(nil),
		(*DirectComparison_StringListOperand)(nil),
		(*DirectComparison_SingleIntOperand)(nil),
		(*DirectComparison_IntListOperand)(nil),
		(*DirectComparison_SingleDoubleOperand)(nil),
		(*DirectComparison_DoubleListOperand)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*SingleIntComparison_GenericComparator)(nil),
		(*SingleIntComparison_NumberComparator)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*SingleDoubleComparison_GenericComparator)(nil),
		(*SingleDoubleComparison_NumberComparator)(nil),
	}
	file_chromadb_proto_chroma_proto_msgTypes[31].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chromadb_proto_chroma_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_chromadb_proto_chroma_proto_goTypes,
		DependencyIndexes: file_chromadb_proto_chroma_proto_depIdxs,
		EnumInfos:         file_chromadb_proto_chroma_proto_enumTypes,
		MessageInfos:      file_chromadb_proto_chroma_proto_msgTypes,
	}.Build()
	File_chromadb_proto_chroma_proto = out.File
	file_chromadb_proto_chroma_proto_rawDesc = nil
	file_chromadb_proto_chroma_proto_goTypes = nil
	file_chromadb_proto_chroma_proto_depIdxs = nil
}
