// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/sysdb/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	"github.com/google/uuid"
)

// IAttachedFunctionDb is an autogenerated mock type for the IAttachedFunctionDb type
type IAttachedFunctionDb struct {
	mock.Mock
}

// DeleteAll provides a mock function with no fields
func (_m *IAttachedFunctionDb) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Advance provides a mock function with given fields: attachedFunctionID, attachedFunctionRunNonce, completionOffset, nextRunDelaySecs
func (_m *IAttachedFunctionDb) Advance(attachedFunctionID uuid.UUID, attachedFunctionRunNonce uuid.UUID, completionOffset int64, nextRunDelaySecs uint64) (*dbmodel.AdvanceAttachedFunction, error) {
	ret := _m.Called(attachedFunctionID, attachedFunctionRunNonce, completionOffset, nextRunDelaySecs)

	if len(ret) == 0 {
		panic("no return value specified for Advance")
	}

	var r0 *dbmodel.AdvanceAttachedFunction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, uint64) (*dbmodel.AdvanceAttachedFunction, error)); ok {
		return rf(attachedFunctionID, attachedFunctionRunNonce, completionOffset, nextRunDelaySecs)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, uint64) *dbmodel.AdvanceAttachedFunction); ok {
		r0 = rf(attachedFunctionID, attachedFunctionRunNonce, completionOffset, nextRunDelaySecs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.AdvanceAttachedFunction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, int64, uint64) error); ok {
		r1 = rf(attachedFunctionID, attachedFunctionRunNonce, completionOffset, nextRunDelaySecs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CleanupExpiredPartial provides a mock function with given fields: maxAgeSeconds
func (_m *IAttachedFunctionDb) CleanupExpiredPartial(maxAgeSeconds uint64) ([]uuid.UUID, error) {
	ret := _m.Called(maxAgeSeconds)

	if len(ret) == 0 {
		panic("no return value specified for CleanupExpiredPartial")
	}

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]uuid.UUID, error)); ok {
		return rf(maxAgeSeconds)
	}
	if rf, ok := ret.Get(0).(func(uint64) []uuid.UUID); ok {
		r0 = rf(maxAgeSeconds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(maxAgeSeconds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Finish provides a mock function with given fields: attachedFunctionID
func (_m *IAttachedFunctionDb) Finish(attachedFunctionID uuid.UUID) error {
	ret := _m.Called(attachedFunctionID)

	if len(ret) == 0 {
		panic("no return value specified for Finish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(attachedFunctionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: attachedFunctionID
func (_m *IAttachedFunctionDb) GetByID(attachedFunctionID uuid.UUID) (*dbmodel.AttachedFunction, error) {
	ret := _m.Called(attachedFunctionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dbmodel.AttachedFunction
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dbmodel.AttachedFunction, error)); ok {
		return rf(attachedFunctionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dbmodel.AttachedFunction); ok {
		r0 = rf(attachedFunctionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.AttachedFunction)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(attachedFunctionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: inputCollectionID, attachedFunctionName
func (_m *IAttachedFunctionDb) GetByName(inputCollectionID string, attachedFunctionName string) (*dbmodel.AttachedFunction, error) {
	ret := _m.Called(inputCollectionID, attachedFunctionName)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *dbmodel.AttachedFunction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dbmodel.AttachedFunction, error)); ok {
		return rf(inputCollectionID, attachedFunctionName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dbmodel.AttachedFunction); ok {
		r0 = rf(inputCollectionID, attachedFunctionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.AttachedFunction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputCollectionID, attachedFunctionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: attachedFunction
func (_m *IAttachedFunctionDb) Insert(attachedFunction *dbmodel.AttachedFunction) error {
	ret := _m.Called(attachedFunction)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbmodel.AttachedFunction) error); ok {
		r0 = rf(attachedFunction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMinCompletionOffsetForCollection provides a mock function with given fields: inputCollectionID
func (_m *IAttachedFunctionDb) GetMinCompletionOffsetForCollection(inputCollectionID string) (*int64, error) {
	ret := _m.Called(inputCollectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetMinCompletionOffsetForCollection")
	}

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(inputCollectionID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(inputCollectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inputCollectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeekScheduleByCollectionId provides a mock function with given fields: collectionIDs
func (_m *IAttachedFunctionDb) PeekScheduleByCollectionId(collectionIDs []string) ([]*dbmodel.AttachedFunction, error) {
	ret := _m.Called(collectionIDs)

	if len(ret) == 0 {
		panic("no return value specified for PeekScheduleByCollectionId")
	}

	var r0 []*dbmodel.AttachedFunction
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*dbmodel.AttachedFunction, error)); ok {
		return rf(collectionIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []*dbmodel.AttachedFunction); ok {
		r0 = rf(collectionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.AttachedFunction)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(collectionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDelete provides a mock function with given fields: inputCollectionID, attachedFunctionName
func (_m *IAttachedFunctionDb) SoftDelete(inputCollectionID string, attachedFunctionName string) error {
	ret := _m.Called(inputCollectionID, attachedFunctionName)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputCollectionID, attachedFunctionName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDeleteByID provides a mock function with given fields: id
func (_m *IAttachedFunctionDb) SoftDeleteByID(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompletionOffset provides a mock function with given fields: attachedFunctionID, attachedFunctionRunNonce, completionOffset
func (_m *IAttachedFunctionDb) UpdateCompletionOffset(attachedFunctionID uuid.UUID, attachedFunctionRunNonce uuid.UUID, completionOffset int64) error {
	ret := _m.Called(attachedFunctionID, attachedFunctionRunNonce, completionOffset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompletionOffset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64) error); ok {
		r0 = rf(attachedFunctionID, attachedFunctionRunNonce, completionOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLowestLiveNonce provides a mock function with given fields: attachedFunctionID, lowestLiveNonce
func (_m *IAttachedFunctionDb) UpdateLowestLiveNonce(attachedFunctionID uuid.UUID, lowestLiveNonce uuid.UUID) error {
	ret := _m.Called(attachedFunctionID, lowestLiveNonce)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLowestLiveNonce")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(attachedFunctionID, lowestLiveNonce)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOutputCollectionID provides a mock function with given fields: attachedFunctionID, outputCollectionID
func (_m *IAttachedFunctionDb) UpdateOutputCollectionID(attachedFunctionID uuid.UUID, outputCollectionID *string) error {
	ret := _m.Called(attachedFunctionID, outputCollectionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOutputCollectionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *string) error); ok {
		r0 = rf(attachedFunctionID, outputCollectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIAttachedFunctionDb creates a new instance of IAttachedFunctionDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAttachedFunctionDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAttachedFunctionDb {
	mock := &IAttachedFunctionDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
