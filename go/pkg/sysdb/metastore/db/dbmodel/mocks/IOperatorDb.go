// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/sysdb/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IOperatorDb is an autogenerated mock type for the IOperatorDb type
type IOperatorDb struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: operatorID
func (_m *IOperatorDb) GetByID(operatorID uuid.UUID) (*dbmodel.Operator, error) {
	ret := _m.Called(operatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dbmodel.Operator
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dbmodel.Operator, error)); ok {
		return rf(operatorID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dbmodel.Operator); ok {
		r0 = rf(operatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Operator)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(operatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: operatorName
func (_m *IOperatorDb) GetByName(operatorName string) (*dbmodel.Operator, error) {
	ret := _m.Called(operatorName)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *dbmodel.Operator
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dbmodel.Operator, error)); ok {
		return rf(operatorName)
	}
	if rf, ok := ret.Get(0).(func(string) *dbmodel.Operator); ok {
		r0 = rf(operatorName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Operator)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(operatorName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIOperatorDb creates a new instance of IOperatorDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIOperatorDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *IOperatorDb {
	mock := &IOperatorDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
