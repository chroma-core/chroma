// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/sysdb/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IFunctionDb is an autogenerated mock type for the IFunctionDb type
type IFunctionDb struct {
	mock.Mock
}

// GetAll provides a mock function with no fields
func (_m *IFunctionDb) GetAll() ([]*dbmodel.Function, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*dbmodel.Function
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*dbmodel.Function, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*dbmodel.Function); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.Function)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: functionID
func (_m *IFunctionDb) GetByID(functionID uuid.UUID) (*dbmodel.Function, error) {
	ret := _m.Called(functionID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dbmodel.Function
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dbmodel.Function, error)); ok {
		return rf(functionID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dbmodel.Function); ok {
		r0 = rf(functionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Function)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(functionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: functionName
func (_m *IFunctionDb) GetByName(functionName string) (*dbmodel.Function, error) {
	ret := _m.Called(functionName)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *dbmodel.Function
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dbmodel.Function, error)); ok {
		return rf(functionName)
	}
	if rf, ok := ret.Get(0).(func(string) *dbmodel.Function); ok {
		r0 = rf(functionName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Function)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(functionName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFunctionDb creates a new instance of IFunctionDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFunctionDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFunctionDb {
	mock := &IFunctionDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
