// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/sysdb/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"

	"github.com/google/uuid"
)

// ITaskDb is an autogenerated mock type for the ITaskDb type
type ITaskDb struct {
	mock.Mock
}

// DeleteAll provides a mock function with no fields
func (_m *ITaskDb) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AdvanceTask provides a mock function with given fields: taskID, taskRunNonce, completionOffset, nextRunDelaySecs
func (_m *ITaskDb) AdvanceTask(taskID uuid.UUID, taskRunNonce uuid.UUID, completionOffset int64, nextRunDelaySecs uint64) (*dbmodel.AdvanceTask, error) {
	ret := _m.Called(taskID, taskRunNonce, completionOffset, nextRunDelaySecs)

	if len(ret) == 0 {
		panic("no return value specified for AdvanceTask")
	}

	var r0 *dbmodel.AdvanceTask
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, uint64) (*dbmodel.AdvanceTask, error)); ok {
		return rf(taskID, taskRunNonce, completionOffset, nextRunDelaySecs)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64, uint64) *dbmodel.AdvanceTask); ok {
		r0 = rf(taskID, taskRunNonce, completionOffset, nextRunDelaySecs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.AdvanceTask)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, uuid.UUID, int64, uint64) error); ok {
		r1 = rf(taskID, taskRunNonce, completionOffset, nextRunDelaySecs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinishTask provides a mock function with given fields: taskID
func (_m *ITaskDb) FinishTask(taskID uuid.UUID) error {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for FinishTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: taskID
func (_m *ITaskDb) GetByID(taskID uuid.UUID) (*dbmodel.Task, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dbmodel.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*dbmodel.Task, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *dbmodel.Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: inputCollectionID, taskName
func (_m *ITaskDb) GetByName(inputCollectionID string, taskName string) (*dbmodel.Task, error) {
	ret := _m.Called(inputCollectionID, taskName)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *dbmodel.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dbmodel.Task, error)); ok {
		return rf(inputCollectionID, taskName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dbmodel.Task); ok {
		r0 = rf(inputCollectionID, taskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputCollectionID, taskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: task
func (_m *ITaskDb) Insert(task *dbmodel.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbmodel.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMinCompletionOffsetForCollection provides a mock function with given fields: inputCollectionID
func (_m *ITaskDb) GetMinCompletionOffsetForCollection(inputCollectionID string) (*int64, error) {
	ret := _m.Called(inputCollectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetMinCompletionOffsetForCollection")
	}

	var r0 *int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*int64, error)); ok {
		return rf(inputCollectionID)
	}
	if rf, ok := ret.Get(0).(func(string) *int64); ok {
		r0 = rf(inputCollectionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(inputCollectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PeekScheduleByCollectionId provides a mock function with given fields: collectionIDs
func (_m *ITaskDb) PeekScheduleByCollectionId(collectionIDs []string) ([]*dbmodel.Task, error) {
	ret := _m.Called(collectionIDs)

	if len(ret) == 0 {
		panic("no return value specified for PeekScheduleByCollectionId")
	}

	var r0 []*dbmodel.Task
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*dbmodel.Task, error)); ok {
		return rf(collectionIDs)
	}
	if rf, ok := ret.Get(0).(func([]string) []*dbmodel.Task); ok {
		r0 = rf(collectionIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dbmodel.Task)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(collectionIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDelete provides a mock function with given fields: inputCollectionID, taskName
func (_m *ITaskDb) SoftDelete(inputCollectionID string, taskName string) error {
	ret := _m.Called(inputCollectionID, taskName)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputCollectionID, taskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCompletionOffset provides a mock function with given fields: taskID, taskRunNonce, completionOffset
func (_m *ITaskDb) UpdateCompletionOffset(taskID uuid.UUID, taskRunNonce uuid.UUID, completionOffset int64) error {
	ret := _m.Called(taskID, taskRunNonce, completionOffset)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCompletionOffset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, uuid.UUID, int64) error); ok {
		r0 = rf(taskID, taskRunNonce, completionOffset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOutputCollectionID provides a mock function with given fields: taskID, outputCollectionID
func (_m *ITaskDb) UpdateOutputCollectionID(taskID uuid.UUID, outputCollectionID *string) error {
	ret := _m.Called(taskID, outputCollectionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOutputCollectionID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, *string) error); ok {
		r0 = rf(taskID, outputCollectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITaskDb creates a new instance of ITaskDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskDb {
	mock := &ITaskDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
