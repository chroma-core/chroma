// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	dbmodel "github.com/chroma-core/chroma/go/pkg/sysdb/metastore/db/dbmodel"
	mock "github.com/stretchr/testify/mock"
)

// ITaskDb is an autogenerated mock type for the ITaskDb type
type ITaskDb struct {
	mock.Mock
}

// DeleteAll provides a mock function with no fields
func (_m *ITaskDb) DeleteAll() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteAll")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByName provides a mock function with given fields: inputCollectionID, taskName
func (_m *ITaskDb) GetByName(inputCollectionID string, taskName string) (*dbmodel.Task, error) {
	ret := _m.Called(inputCollectionID, taskName)

	if len(ret) == 0 {
		panic("no return value specified for GetByName")
	}

	var r0 *dbmodel.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*dbmodel.Task, error)); ok {
		return rf(inputCollectionID, taskName)
	}
	if rf, ok := ret.Get(0).(func(string, string) *dbmodel.Task); ok {
		r0 = rf(inputCollectionID, taskName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dbmodel.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(inputCollectionID, taskName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: task
func (_m *ITaskDb) Insert(task *dbmodel.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dbmodel.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDelete provides a mock function with given fields: inputCollectionID, taskName
func (_m *ITaskDb) SoftDelete(inputCollectionID string, taskName string) error {
	ret := _m.Called(inputCollectionID, taskName)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(inputCollectionID, taskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITaskDb creates a new instance of ITaskDb. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskDb(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskDb {
	mock := &ITaskDb{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
