# Cloud

- [Chroma Cloud](https://docs.trychroma.com/cloud/getting-started.md): The page introduces Chroma Cloud, a fully managed and serverless version of Distributed Chroma, emphasizing ease of use, reliability, security, and scalability, with deployment flexibility and a user-friendly web dashboard.
- [Pricing](https://docs.trychroma.com/cloud/pricing.md): The page explains Chroma Cloud's usage-based pricing model, covering costs associated with writes, reads, and storage, as well as addressing frequently asked questions about billing and deployment options.
- [Quotas & Limits](https://docs.trychroma.com/cloud/quotas-limits.md): The page details the quotas and limits enforced by Chroma Cloud to ensure stability and fairness, with information on how to request increases if needed.

# Docs

- [Browsing Collections](https://docs.trychroma.com/docs/cli/browse.md): The page covers how to use the Chroma CLI to browse collections either from Chroma Cloud or a local Chroma server, detailing command syntax, arguments, and features of the Collection Browser UI including main view navigation and search functionalities.
- [Copy Chroma Collections](https://docs.trychroma.com/docs/cli/copy.md): The page describes how to use the Chroma CLI to copy collections between a local Chroma server and Chroma Cloud, detailing the command arguments and providing example use cases for both directions.
- [DB Management on Chroma Cloud](https://docs.trychroma.com/docs/cli/db.md): The page explains how to use the Chroma CLI to manage databases on Chroma Cloud, including commands to connect to, create, delete, and list databases.
- [Installing the Chroma CLI](https://docs.trychroma.com/docs/cli/install.md): The page provides instructions for installing the Chroma CLI using Python or JavaScript package managers, as well as standalone installation methods using cURL or iex.
- [Authenticating with Chroma Cloud](https://docs.trychroma.com/docs/cli/login.md): The page provides instructions on how to authenticate the Chroma CLI with a Chroma Cloud account, including creating or logging into an account, running the login command, and managing CLI profiles.
- [Profile Management](https://docs.trychroma.com/docs/cli/profile.md): The page provides information on managing profiles in the Chroma CLI, covering profile creation, deletion, listing, renaming, and setting the active profile for Chroma Cloud access.
- [Running a Chroma Server](https://docs.trychroma.com/docs/cli/run.md): The page explains how to run a Chroma server locally using the Chroma CLI and connect to it via HTTP clients in Python and TypeScript.
- [Sample Apps](https://docs.trychroma.com/docs/cli/sample-apps.md): The page provides information on installing and setting up Chroma's sample AI applications using the CLI.
- [Update](https://docs.trychroma.com/docs/cli/update.md): The page explains the `chroma update` command, which checks for updates to the CLI installation when using Python or JavaScript packages.
- [Vacuuming](https://docs.trychroma.com/docs/cli/vacuum.md): The page explains the process and purpose of vacuuming in Chroma, including how to perform it and its impact on the database.
- [Adding Data to Chroma Collections](https://docs.trychroma.com/docs/collections/add-data.md): The page explains how to add data to a Chroma collection using the `.add` method, with examples in Python and TypeScript, detailing how to include `ids`, `documents`, `embeddings`, and `metadata`, as well as handling existing IDs and embedding dimensions.
- [Configuring Chroma Collections](https://docs.trychroma.com/docs/collections/configure.md): The page provides an overview of configuring Chroma collections, focusing on the default and customizable settings for HNSW and SPANN indices, embedding functions, and parameters affecting data accuracy and performance for both single-node and distributed environments.
- [Deleting Data from Chroma Collections](https://docs.trychroma.com/docs/collections/delete-data.md): The page details how to delete items from Chroma collections using the `.delete` method by specifying `id` or a `where` filter, along with examples in Python and TypeScript.
- [Managing Chroma Collections](https://docs.trychroma.com/docs/collections/manage-collections.md): The page provides a comprehensive guide on managing Chroma collections, including creating, retrieving, modifying, and deleting collections, as well as details on embedding functions, metadata, and convenience methods.
- [Updating Data in Chroma Collections](https://docs.trychroma.com/docs/collections/update-data.md): The page provides instructions on how to update or upsert records in Chroma collections using `.update` and `upsert` methods, including handling of `ids`, `embeddings`, `metadatas`, and `documents` in both Python and TypeScript.
- [Embedding Functions](https://docs.trychroma.com/docs/embeddings/embedding-functions.md): The page details the usage of embedding functions in Chroma, covering their purpose, integration options, default settings, how to apply them in applications, and guidance on creating custom embedding functions.
- [Multimodal](https://docs.trychroma.com/docs/embeddings/multimodal.md): The page covers Chroma's multimodal functionality, including creating collections that store and query multiple data modalities such as text and images, as well as using embedding functions, data loaders, and querying techniques.
- [About](https://docs.trychroma.com/docs/overview/about.md): The page provides an overview of Chroma, including its team, commitment to open source, and details about its investors.
- [Architecture](https://docs.trychroma.com/docs/overview/architecture.md): The page provides a detailed overview of Chroma's modular architecture, covering its deployment modes, core components, storage and runtime considerations, request sequences for read and write operations, and tradeoffs in distributed deployment.
- [Contributing](https://docs.trychroma.com/docs/overview/contributing.md): The page provides guidelines on contributing to Chroma, including submitting code, bug reports, documentation improvements, and proposing new features via pull requests and Chroma Improvement Proposals (CIPs).
- [Chroma Data Model](https://docs.trychroma.com/docs/overview/data-model.md): The page describes Chroma's data model, focusing on core abstractions like Tenants, Databases, and Collections to efficiently organize and manage data with features like vector similarity and metadata filtering.
- [Getting Started](https://docs.trychroma.com/docs/overview/getting-started.md): The page provides a step-by-step guide on getting started with Chroma, an open-source vector database, including installation, creating a client, managing collections, adding and querying text documents, and inspecting results, along with options for further steps and community resources.
- [Chroma](https://docs.trychroma.com/docs/overview/introduction.md): The page introduces Chroma as an open-source AI application database, explaining its features for LLM app development, describing installation methods for Python and JavaScript/TypeScript, and listing language clients.
- [Migration](https://docs.trychroma.com/docs/overview/migration.md): The page provides guidelines and detailed notes on migrating through various schema and data format changes in Chroma, emphasizing the availability of a migration tool, change notifications, and breaking changes across different versions.
- [Roadmap](https://docs.trychroma.com/docs/overview/roadmap.md): The page outlines the Chroma project's roadmap, detailing current and future priorities of the core team, completed features, and areas for community contributions.
- [Telemetry](https://docs.trychroma.com/docs/overview/telemetry.md): The page describes Chroma's telemetry feature, its purpose, details on opting out, tracked data, and how the telemetry information is stored.
- [Troubleshooting](https://docs.trychroma.com/docs/overview/troubleshooting.md): The page provides troubleshooting tips for common issues with Chroma, including JS-Client failures on NextJS, HNSW index errors, installation problems, SQLite version issues, Docker build errors, and large data directories.
- [Full Text Search and Regex](https://docs.trychroma.com/docs/querying-collections/full-text-search.md): The page describes how to use full-text search and regex in Chroma, including using logical operators for filtering document content in both Python and TypeScript.
- [Metadata Filtering](https://docs.trychroma.com/docs/querying-collections/metadata-filtering.md): The page explains how to use metadata filtering in Chroma's `get` and `query` operations, including the structure of filter dictionaries, the use of logical and inclusion operators, and combining metadata filtering with document search.
- [Query and Get Data from Chroma Collections](https://docs.trychroma.com/docs/querying-collections/query-and-get.md): The page details how to query and retrieve data from Chroma collections using Python and TypeScript, outlining the use of methods like `.query` and `.get`, and how to customize returned results.
- [Running Chroma in Client-Server Mode](https://docs.trychroma.com/docs/run-chroma/client-server.md): The page explains how to run Chroma in client-server mode, detailing commands and code examples for both Python and TypeScript clients to connect to a separate Chroma server instance.
- [Cloud Client](https://docs.trychroma.com/docs/run-chroma/cloud-client.md): The page explains how to use the `CloudClient` for connecting to Chroma Cloud, including example code in Python and TypeScript, and describes how to instantiate it with or without providing specific arguments.
- [Ephemeral Client](https://docs.trychroma.com/docs/run-chroma/ephemeral-client.md): The page explains how to use the `EphemeralClient()` in Python to start a Chroma server in-memory, suitable for experimentation without data persistence.
- [Persistent Client](https://docs.trychroma.com/docs/run-chroma/persistent-client.md): The page provides instructions on configuring and using the `PersistentClient` in Python and TypeScript for saving and loading a Chroma database locally, with additional setup details for running a Chroma server and utilizing client convenience methods.

# Guides

- [Building with AI](https://docs.trychroma.com/guides/build/building-with-ai.md): The page describes using large language models (LLMs) as programming primitives to extract names from text, providing code examples in Python and TypeScript for OpenAI and Anthropic APIs.
- [Introduction to Retrieval](https://docs.trychroma.com/guides/build/intro-to-retrieval.md): The page explains how retrieval systems like Chroma can address the limitations of large language models by enabling AI to access and use specific knowledge bases to provide accurate responses, detailing the process of embedding and storing information, processing queries, and integrating retrieval with AI models for improved performance.
- [AWS Deployment](https://docs.trychroma.com/guides/deploy/aws.md): The page provides instructions for deploying Chroma on AWS using a simple CloudFormation template, including steps for account setup, configuration, deployment, client setup, and cleanup, as well as notes on resource requirements, data persistence, observability, and troubleshooting.
- [Azure Deployment](https://docs.trychroma.com/guides/deploy/azure.md): The page provides a step-by-step guide for deploying Chroma on Azure using Terraform, including installation, configuration, and client setup instructions, as well as information on cleanup and observability options.
- [Running Chroma in Client-Server Mode](https://docs.trychroma.com/guides/deploy/client-server-mode.md): The page explains how to configure and run Chroma in client-server mode using Python and TypeScript, detailing the process for connecting to a Chroma server deployed on a local machine or cloud service.
- [Docker](https://docs.trychroma.com/guides/deploy/docker.md): The page provides detailed instructions on how to run Chroma in a Docker container, configure it with a YAML file, and set up observability using OpenTelemetry and Docker Compose.
- [GCP Deployment](https://docs.trychroma.com/guides/deploy/gcp.md): The page provides detailed instructions for deploying Chroma on Google Cloud Platform using Terraform, including setting up GCP credentials, configuring Terraform settings, deploying and customizing the Chroma stack, and steps for cleaning up resources.
- [Observability](https://docs.trychroma.com/guides/deploy/observability.md): The page covers observability in Chroma, specifically detailing backend observability using OpenTelemetry for tracing, configuration options for tracing, and available integrations for monitoring interactions with Chroma through various observability platforms.
- [Single-Node Chroma: Performance and Limitations](https://docs.trychroma.com/guides/deploy/performance.md): The page details the performance, limitations, and hardware requirements of the single-node version of Chroma, including metrics on latency, memory, and disk space for different EC2 instance types, and provides guidance on optimizing usage and concurrency for near-production applications.
- [Chroma's Thin-Client](https://docs.trychroma.com/guides/deploy/python-thin-client.md): The page describes Chroma's thin-client, a lightweight client-only library for Python applications using Chroma in client-server mode, and how to install and use it.

# Integrations

- [Integrations](https://docs.trychroma.com/integrations/chroma-integrations.md): The page covers embedding and framework integrations available in Chroma, detailing supported providers and languages for each integration.
- [Baseten](https://docs.trychroma.com/integrations/embedding-models/baseten.md): The page provides information about Baseten as a model inference provider, its integration with Chroma for deploying and using embedding models, and includes instructions for using Baseten models with Chroma.
- [Cloudflare Workers AI](https://docs.trychroma.com/integrations/embedding-models/cloudflare-workers-ai.md): The page explains how to use Chroma's wrapper around Cloudflare Workers AI for embedding models, including setup instructions and code examples in Python and TypeScript.
- [Cohere](https://docs.trychroma.com/integrations/embedding-models/cohere.md): The page provides details on using Chroma's wrapper for Cohere's embedding API, featuring examples in Python and TypeScript for creating embeddings, including multilingual and multimodal models, and requires an API key.
- [Google Gemini](https://docs.trychroma.com/integrations/embedding-models/google-gemini.md): The page covers how to use Chroma's wrapper for Google's Generative AI embedding API, explaining the installation and use of the embedding function with Python and TypeScript, along with links to further examples and documentation.
- [Hugging Face Server](https://docs.trychroma.com/integrations/embedding-models/hugging-face-server.md): The page provides an overview of the Hugging Face Server integration with Chroma, including setup instructions, usage examples in Python and TypeScript, and authentication configuration.
- [Hugging Face](https://docs.trychroma.com/integrations/embedding-models/hugging-face.md): The page provides instructions on using Chroma's wrapper for HuggingFace's embedding API, including how to set up with an API key and select models for embeddings.
- [Instructor](https://docs.trychroma.com/integrations/embedding-models/instructor.md): The page provides information on using the `instructor-embeddings` library with Chroma, detailing its installation, available models, and hardware requirements.
- [JinaAI](https://docs.trychroma.com/integrations/embedding-models/jina-ai.md): The page explains how Chroma integrates with Jina AI's embedding API, providing examples for Python and TypeScript, and details on advanced features like late chunking and task-specific parameters.
- [Mistral](https://docs.trychroma.com/integrations/embedding-models/mistral.md): The page provides instructions on using Chroma's wrapper for Mistral's embedding API, including setup and usage examples in Python and TypeScript.
- [Ollama](https://docs.trychroma.com/integrations/embedding-models/ollama.md): The page describes how to use Chroma's OllamaEmbeddingFunction to generate embeddings for documents using Ollama's embeddings API, with code examples in Python and TypeScript.
- [OpenAI](https://docs.trychroma.com/integrations/embedding-models/openai.md): The page provides a guide on how to use Chroma's wrapper for OpenAI's embedding API, including setup instructions and code examples in Python and TypeScript.
- [Roboflow](https://docs.trychroma.com/integrations/embedding-models/roboflow.md): The page explains how to use Roboflow Inference with Chroma to compute multi-modal text and image embeddings using the `RoboflowEmbeddingFunction` class, either through Roboflow Cloud or locally on your hardware.
- [Together AI](https://docs.trychroma.com/integrations/embedding-models/together-ai.md): The page provides instructions on using Chroma's wrapper for Together AI embedding models, requiring an API key and demonstrating usage with Python and TypeScript examples.
- [VoyageAI](https://docs.trychroma.com/integrations/embedding-models/voyageai.md): The page provides information on Chroma's integration with VoyageAI's embedding API, including setup, usage in Python and TypeScript, and an example for multilingual model embedding.
- [Anthropic MCP Integration](https://docs.trychroma.com/integrations/frameworks/anthropic-mcp.md): The page describes the integration of Anthropic MCP with Chroma, detailing setup instructions, client types, and how Claude can utilize Chroma for features like persistent memory and semantic search.
- [Braintrust](https://docs.trychroma.com/integrations/frameworks/braintrust.md): The page describes Braintrust, an enterprise-grade stack for building AI products, and its integration with Chroma for running and logging evaluations using Typescript and Python libraries.
- [DeepEval](https://docs.trychroma.com/integrations/frameworks/deepeval.md): The page describes how to use DeepEval, an open-source LLM evaluation framework, to optimize Chroma retriever parameters for enhanced retrieval performance, covering installation, test case preparation, evaluation, and visualization.
- [Haystack](https://docs.trychroma.com/integrations/frameworks/haystack.md): The page introduces Haystack, an open-source LLM framework, and explains its integration with Chroma for building custom applications like retrieval-augmented generation pipelines, including installation and usage instructions.
- [Langchain](https://docs.trychroma.com/integrations/frameworks/langchain.md): The page provides resources and tutorials on integrating Chroma with Langchain in both Python and JavaScript, including demos, tutorials, and documentation links.
- [LlamaIndex](https://docs.trychroma.com/integrations/frameworks/llamaindex.md): The page provides links to resources and demos related to using LlamaIndex with Chroma as a vector store.
- [OpenLIT](https://docs.trychroma.com/integrations/frameworks/openlit.md): The page provides an overview and installation guide for OpenLIT, a tool for monitoring LLM applications using OpenTelemetry, including steps for integration and visualization of performance data.
- [OpenLLMetry](https://docs.trychroma.com/integrations/frameworks/openllmetry.md): The page describes OpenLLMetry, a tool for providing observability to systems using Chroma by tracing calls and integrating with OpenTelemetry-supported platforms, along with installation and configuration instructions.
- [Streamlit](https://docs.trychroma.com/integrations/frameworks/streamlit.md): The page provides an introduction to using Streamlit with Chroma, including installation instructions, main benefits, a simple example, resources, and tutorials on integrating Streamlit with Chroma for building custom data apps and chatbots.

# Reference

- [Chroma Reference](https://docs.trychroma.com/reference/chroma-reference.md): The page covers Chroma's client APIs for Python and JavaScript, details on the `Client` and `Collection` objects, and instructions for accessing Chroma's backend Swagger REST API documentation.
- [JS Client](https://docs.trychroma.com/reference/js/client.md): The page provides an overview of the ChromaClient class for the JavaScript client, including its constructor, and various methods for managing collections and interacting with the Chroma API.
- [Class: Collection](https://docs.trychroma.com/reference/js/collection.md): The page describes the properties and methods of the `Collection` class, including its ability to add, count, delete, get, modify, peek, query, update, and upsert items, with examples for each operation.
- [Python Client](https://docs.trychroma.com/reference/python/client.md): The page provides an overview of the various Python clients and methods available in Chroma, including configurations for different types of clients such as EphemeralClient, PersistentClient, HttpClient, and CloudClient, as well as administrative and basic operations for managing collections, databases, tenants, and system settings.
- [Python Collection](https://docs.trychroma.com/reference/python/collection.md): The page provides detailed information about the `Collection` class in the Chroma Python library, including methods for managing embeddings such as adding, retrieving, querying, updating, upserting, modifying, and deleting entries in the database.
