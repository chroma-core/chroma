# Cloud

- [Chroma Cloud](https://docs.trychroma.com/cloud/getting-started.md): The page introduces Chroma Cloud, a fully managed, serverless, and scalable service offering of Distributed Chroma, highlighting its ease of use, reliability, security, and dashboard features.
- [Pricing](https://docs.trychroma.com/cloud/pricing.md): The page details the pricing model for Chroma Cloud, explaining usage-based charges for writes, reads, and storage, along with frequently asked questions on billing and deployment options.
- [Quotas & Limits](https://docs.trychroma.com/cloud/quotas-limits.md): The page outlines the quotas and limits enforced by Chroma Cloud to maintain stability and fairness in a multi-tenant environment, detailing values for various constraints such as embedding dimensions, document size, and concurrent operations.

# Docs

- [Browsing Collections](https://docs.trychroma.com/docs/cli/browse.md): The page explains how to use the Chroma CLI to browse collections in Chroma Cloud or on a local Chroma server with an in-terminal UI, including details on arguments, usage examples, and features of the Collection Browser UI.
- [Copy Chroma Collections](https://docs.trychroma.com/docs/cli/copy.md): The page explains how to use the Chroma CLI to copy collections between a local Chroma server and Chroma Cloud, including command syntax, arguments, use cases, and handling quota limitations.
- [DB Management on Chroma Cloud](https://docs.trychroma.com/docs/cli/db.md): The page provides an overview of database management commands in the Chroma CLI for Chroma Cloud, including connecting to, creating, deleting, and listing databases.
- [Installing the Chroma CLI](https://docs.trychroma.com/docs/cli/install.md): The page provides instructions for installing the Chroma CLI, detailing methods for using Python and JavaScript package managers, as well as standalone installation using cURL or a script for Windows.
- [Authenticating with Chroma Cloud](https://docs.trychroma.com/docs/cli/login.md): The page explains how to authenticate the Chroma CLI with a Chroma Cloud account, covering steps from account creation or login in a browser to running the `chroma login` command in the terminal, and managing profiles for different teams.
- [Profile Management](https://docs.trychroma.com/docs/cli/profile.md): The page describes how to manage profiles in the Chroma CLI, including creating, deleting, listing, renaming, and setting active profiles for authentication with Chroma Cloud.
- [Running a Chroma Server](https://docs.trychroma.com/docs/cli/run.md): The page explains how to run a Chroma server locally using the Chroma CLI, including options for configuring server settings and connecting to the server using Python and TypeScript clients.
- [Sample Apps](https://docs.trychroma.com/docs/cli/sample-apps.md): The page provides information on how to use the Chroma CLI to install and customize sample AI applications, starting from Chroma version 1.0.4.
- [Update](https://docs.trychroma.com/docs/cli/update.md): The page explains the `chroma update` command, which notifies users if they need to update their CLI installation and ensures they have the latest `chromadb` package version.
- [Vacuuming](https://docs.trychroma.com/docs/cli/vacuum.md): The page explains the process and purpose of vacuuming in Chroma, highlighting its benefits for database optimization, particularly after upgrading from versions below v0.5.6, and provides instructions for executing the vacuum command.
- [Adding Data to Chroma Collections](https://docs.trychroma.com/docs/collections/add-data.md): The page explains how to add data to Chroma collections using the `.add` method, detailing how to include document IDs, documents, metadata, and optionally, pre-generated embeddings in Python and TypeScript.
- [Configuring Chroma Collections](https://docs.trychroma.com/docs/collections/configure.md): The page details how to configure Chroma collections, including customizing their index configurations for optimal performance, using HNSW and SPANN indices for approximate nearest neighbor searches, and setting embedding functions with examples in Python and TypeScript.
- [Deleting Data from Chroma Collections](https://docs.trychroma.com/docs/collections/delete-data.md): The page explains how to delete items from Chroma collections using the `.delete` method, with examples in Python and TypeScript, and emphasizes that this operation is irreversible.
- [Managing Chroma Collections](https://docs.trychroma.com/docs/collections/manage-collections.md): The page details how to manage Chroma collections, including creating, retrieving, modifying, and deleting collections, as well as using embedding functions and special methods.
- [Updating Data in Chroma Collections](https://docs.trychroma.com/docs/collections/update-data.md): The page explains how to update and upsert data in Chroma collections, detailing the use of `.update` and `.upsert` functions in both Python and TypeScript, including handling errors and recomputing embeddings.
- [Embedding Functions](https://docs.trychroma.com/docs/embeddings/embedding-functions.md): The page covers how to use and create embedding functions in Chroma, including linking embeddings to collections, using default and popular embedding providers, and implementing custom embedding functions in Python and Typescript.
- [Multimodal](https://docs.trychroma.com/docs/embeddings/multimodal.md): The page covers Chroma's support for creating and managing multimodal collections, including functionalities for adding, querying, and updating data of different modalities, such as text and images, utilizing embedding functions and data loaders.
- [About](https://docs.trychroma.com/docs/overview/about.md): The page provides an overview of Chroma, detailing its team, commitment to open source, business model philosophy, and financial backing from investors.
- [Architecture](https://docs.trychroma.com/docs/overview/architecture.md): The page describes Chroma's modular architecture, detailing its deployment modes, core components, storage strategies, and request processing paths, with a focus on balancing performance, scalability, and cost across different environments.
- [Contributing](https://docs.trychroma.com/docs/overview/contributing.md): The page provides guidelines for contributing to Chroma, including how to report issues, submit pull requests, create Chroma Improvement Proposals (CIPs), and engage with the community via Discord.
- [Chroma Data Model](https://docs.trychroma.com/docs/overview/data-model.md): The page explains Chroma's data model, including the concepts of Tenants, Databases, and Collections for efficient data organization, retrieval, and management.
- [Getting Started](https://docs.trychroma.com/docs/overview/getting-started.md): The page provides a detailed guide for getting started with Chroma, an open-source vector database, including installation steps, creating a client, setting up collections, adding documents, querying, and inspecting results, along with options for both Python and TypeScript implementations.
- [Chroma](https://docs.trychroma.com/docs/overview/introduction.md): The page provides an overview of Chroma, an open-source AI application database for building LLM apps, detailing its features, installation instructions for different programming languages, and links to language-specific clients.
- [Migration](https://docs.trychroma.com/docs/overview/migration.md): The page details Chroma's migration framework, highlighting its commitment to providing an easy migration process for schema and data format changes, along with a log of specific changes and migration instructions for various versions.
- [Roadmap](https://docs.trychroma.com/docs/overview/roadmap.md): The page outlines the roadmap for the Chroma project, detailing current and upcoming priorities for the core team, as well as areas suitable for community contributions.
- [Telemetry](https://docs.trychroma.com/docs/overview/telemetry.md): The page explains Chroma's telemetry feature, including its purpose, how users can opt out, what data is tracked, and storage information.
- [Troubleshooting](https://docs.trychroma.com/docs/overview/troubleshooting.md): The page provides troubleshooting tips for common issues with Chroma, including JS-Client failures on NextJS projects, HNSW index configuration errors, missing embeddings in queries, installation errors on various operating systems, and SQLite version issues.
- [Full Text Search and Regex](https://docs.trychroma.com/docs/querying-collections/full-text-search.md): The page describes how to use full-text search and regular expression pattern matching within the Chroma `get` and `query` functions, including examples in Python and TypeScript, and the combination of these searches with metadata filtering.
- [Metadata Filtering](https://docs.trychroma.com/docs/querying-collections/metadata-filtering.md): The page explains how to use metadata filtering with the `where` argument in Chroma's `get` and `query` operations, including examples of using comparison, logical, and inclusion operators in both Python and TypeScript.
- [Query and Get Data from Chroma Collections](https://docs.trychroma.com/docs/querying-collections/query-and-get.md): The page explains how to query and retrieve data from Chroma collections using the `.query` and `.get` methods in both Python and TypeScript, including instructions on similarity searches, filtering, result customization, and data format specifications.
- [Running Chroma in Client-Server Mode](https://docs.trychroma.com/docs/run-chroma/client-server.md): The page explains how to configure and run Chroma in client-server mode, including starting the server and connecting with client code in Python and TypeScript.
- [Cloud Client](https://docs.trychroma.com/docs/run-chroma/cloud-client.md): The page provides instructions on using the `CloudClient` to connect to Chroma Cloud, including example code in Python and TypeScript for client instantiation with various configuration options.
- [Ephemeral Client](https://docs.trychroma.com/docs/run-chroma/ephemeral-client.md): The page explains how to use the `EphemeralClient()` in Python to run an in-memory Chroma server for experimentation without data persistence.
- [Persistent Client](https://docs.trychroma.com/docs/run-chroma/persistent-client.md): The page describes how to configure and use the `PersistentClient` in Chroma for both Python and Typescript, including how to save and load the database persistently on your local machine or connect to a Chroma server, along with some convenience methods like `heartbeat` and `reset`.

# Guides

- [Building with AI](https://docs.trychroma.com/guides/build/building-with-ai.md): The page explains how to build AI applications using large language models (LLMs) to perform tasks such as extracting names from text, with example code for integrating LLMs via API in both Python and TypeScript for different providers.
- [Introduction to Retrieval](https://docs.trychroma.com/guides/build/intro-to-retrieval.md): The page introduces the concept of retrieval in AI applications, explaining the limitations of large language models when specific knowledge is required and detailing how retrieval systems like Chroma can store, process, and integrate information into AI responses to overcome these challenges.
- [AWS Deployment](https://docs.trychroma.com/guides/deploy/aws.md): The page provides a guide to deploying Chroma on AWS using a simple AWS CloudFormation template, including setup steps, customization options, client configuration, and instructions for cleanup and observability.
- [Azure Deployment](https://docs.trychroma.com/guides/deploy/azure.md): The page provides a guide for deploying Chroma on Azure using Terraform, including installation, authentication, configuration, deployment, client setup, clean-up, and enabling observability with OpenTelemetry.
- [Running Chroma in Client-Server Mode](https://docs.trychroma.com/guides/deploy/client-server-mode.md): The page explains how to run Chroma in client-server mode using Python and TypeScript, detailing configuration steps, deployment to cloud providers or a Docker container, and client connection options with example code for both synchronous and asynchronous operations.
- [Docker](https://docs.trychroma.com/guides/deploy/docker.md): The page provides instructions for running Chroma in a Docker container, including configuration, client connection in Python and TypeScript, and setting up observability with OpenTelemetry and Docker Compose.
- [GCP Deployment](https://docs.trychroma.com/guides/deploy/gcp.md): The page provides a guide for deploying Chroma on Google Cloud Platform (GCP) using Terraform, outlining necessary setup steps, configuration, and considerations regarding authentication, data persistence, and observability.
- [Observability](https://docs.trychroma.com/guides/deploy/observability.md): The page discusses Chroma's observability features, focusing on OpenTelemetry integration for backend tracing and configuration, as well as guides for various deployment platforms and client-side observability options through different integrations.
- [Single-Node Chroma: Performance and Limitations](https://docs.trychroma.com/guides/deploy/performance.md): The page discusses the performance and limitations of single-node Chroma, detailing findings from stress tests and experiments, providing insights into workload suitability, hardware requirements, latency, concurrency, and offering guidance on maximizing performance for deployments involving up to tens of millions of embeddings.
- [Chroma's Thin-Client](https://docs.trychroma.com/guides/deploy/python-thin-client.md): The page describes using Chroma's thin-client, a lightweight client-only library for client-server mode applications, detailing installation methods and usage examples for the `chromadb-client` package.
- [](https://docs.trychroma.com/guides/develop/fast-api.md): The page details the integration and usage of FastAPI within the Chroma project.
- [](https://docs.trychroma.com/guides/develop/next-js.md): The page covers the integration and usage of Chroma within a Next.js application.

# Integrations

- [Integrations](https://docs.trychroma.com/integrations/chroma-integrations.md): The page details Chroma's support for various embedding and framework integrations, listing compatibility with Python and Typescript or JavaScript for each provider.
- [Baseten](https://docs.trychroma.com/integrations/embedding-models/baseten.md): The page describes how to integrate and use Baseten's model inference services for embedding models with Chroma, including setup instructions and code examples.
- [Cloudflare Workers AI](https://docs.trychroma.com/integrations/embedding-models/cloudflare-workers-ai.md): The page describes how to use Chroma's wrapper for Cloudflare Workers AI embedding models, requiring a Cloudflare account, API key, and optionally a gateway ID for custom solutions, with code examples in Python and TypeScript.
- [Cohere](https://docs.trychroma.com/integrations/embedding-models/cohere.md): The page provides instructions for integrating Chroma with Cohere's embedding API, including setup and usage examples in Python and TypeScript, as well as examples for multilingual and multimodal models.
- [Google Gemini](https://docs.trychroma.com/integrations/embedding-models/google-gemini.md): The page explains how to use Chroma's wrapper for Google's Generative AI embedding API with Python and TypeScript, including instructions for API key setup and code examples.
- [Hugging Face Server](https://docs.trychroma.com/integrations/embedding-models/hugging-face-server.md): The page provides instructions on setting up and using the Hugging Face Server with Chroma, including command execution for local deployment, code examples in Python and TypeScript, and configuration for authentication with API keys.
- [Hugging Face](https://docs.trychroma.com/integrations/embedding-models/hugging-face.md): The page explains how to use Chroma's wrapper for Hugging Face's embedding API, requiring an API key and allowing customization of the model used.
- [Instructor](https://docs.trychroma.com/integrations/embedding-models/instructor.md): The page describes the InstructorEmbedding library for Chroma, an alternative to OpenAI embeddings, detailing installation, model options, and usage, particularly on cuda-capable machines.
- [JinaAI](https://docs.trychroma.com/integrations/embedding-models/jina-ai.md): The page explains how to use Chroma's integration with JinaAI's embedding API, including code examples in Python and TypeScript, detailed options such as model selection and task-specific adapters, as well as advanced features like late chunking.
- [Mistral](https://docs.trychroma.com/integrations/embedding-models/mistral.md): The page explains how to use Chroma's wrapper for Mistral's remote embedding API, including installation and setup for both Python and TypeScript.
- [Ollama](https://docs.trychroma.com/integrations/embedding-models/ollama.md): The page describes how to use Chroma's wrapper for Ollama's embeddings API, providing examples in Python and TypeScript to generate document embeddings using the `OllamaEmbeddingFunction`.
- [OpenAI](https://docs.trychroma.com/integrations/embedding-models/openai.md): The page explains how Chroma provides a wrapper for OpenAI's embedding API, including details on supported models, installation instructions, and usage examples in Python and TypeScript.
- [Roboflow](https://docs.trychroma.com/integrations/embedding-models/roboflow.md): The page describes how to use Roboflow Inference with Chroma to calculate multi-modal text and image embeddings through the RoboflowEmbeddingFunction class, offering both cloud and local hardware options.
- [Together AI](https://docs.trychroma.com/integrations/embedding-models/together-ai.md): The page describes how Chroma provides a wrapper for Together AI embedding models, requiring an API key and a Together AI account, with code examples for Python and TypeScript.
- [VoyageAI](https://docs.trychroma.com/integrations/embedding-models/voyageai.md): The page describes how to use Chroma's wrapper for the VoyageAI embedding API, including installation, initialization, and usage examples in both Python and TypeScript, highlighting a multilingual model example.
- [Anthropic MCP Integration](https://docs.trychroma.com/integrations/frameworks/anthropic-mcp.md): The page describes the integration of the Anthropic Model Context Protocol (MCP) with Chroma, detailing the setup, configuration, and usage of the Chroma MCP server to enable AI applications like Claude to connect with Chroma's vector database for memory, search, and document management capabilities.
- [Braintrust](https://docs.trychroma.com/integrations/frameworks/braintrust.md): The page introduces Braintrust, an enterprise-grade stack for building AI products, and provides an example of how to use its evaluation features in conjunction with Chroma, including a Python script for running and logging evaluations.
- [DeepEval](https://docs.trychroma.com/integrations/frameworks/deepeval.md): The page provides an overview of DeepEval, an open-source LLM evaluation framework, including installation, test case preparation, evaluation, visualization, and optimization for Chroma retrievers.
- [Haystack](https://docs.trychroma.com/integrations/frameworks/haystack.md): The page describes how to use the Haystack framework with Chroma, detailing installation, usage, and examples for integrating Chroma via the `ChromaDocumentStore` for applications like RAG pipelines and semantic search.
- [Langchain](https://docs.trychroma.com/integrations/frameworks/langchain.md): The page provides resources and links related to using Langchain with Chroma for Python and JavaScript, including tutorials, demo repositories, and documentation.
- [LlamaIndex](https://docs.trychroma.com/integrations/frameworks/llamaindex.md): The page provides links and resources related to the LlamaIndex integration with Chroma, including a vector store page, a demo, and a loader on Llamahub.
- [OpenLIT](https://docs.trychroma.com/integrations/frameworks/openlit.md): The page provides an overview and installation guide for OpenLIT, an OpenTelemetry-native LLM Application Observability tool that integrates with Chroma to seamlessly monitor applications, along with instructions for visualizing and optimizing performance data.
- [OpenLLMetry](https://docs.trychroma.com/integrations/frameworks/openllmetry.md): The page introduces OpenLLMetry, a tool for monitoring systems using Chroma by tracing calls and providing visibility into query and index operations, with installation and configuration instructions.
- [Streamlit](https://docs.trychroma.com/integrations/frameworks/streamlit.md): The page provides an overview of Streamlit, an open-source Python library for creating web apps for machine learning and data science, highlighting its integration with Chroma and offering installation instructions, example code, resources, and tutorials.

# Reference

- [Chroma Reference](https://docs.trychroma.com/reference/chroma-reference.md): The page details the client APIs for Chroma, covering Python and Javascript clients, and provides instructions for accessing the backend Swagger REST API documentation.
- [JS Client](https://docs.trychroma.com/reference/js/client.md): The page describes the `ChromaClient` class in the JS Client of the Chroma documentation, detailing its constructor, methods for managing collections, server interactions, and obtaining API information.
- [Class: Collection](https://docs.trychroma.com/reference/js/collection.md): The page provides the properties and methods for the "Collection" class in Chroma, including detailed explanations and examples for methods like add, count, delete, get, modify, peek, query, update, and upsert.
- [Python Client](https://docs.trychroma.com/reference/python/client.md): The page provides documentation for various Python client functions and classes in Chroma, including client configurations, methods for managing collections and databases, and admin functionalities.
- [Python Collection](https://docs.trychroma.com/reference/python/collection.md): The page describes the `Collection` class in Python for Chroma, detailing its methods for managing embeddings, including adding, retrieving, querying, modifying, updating, upserting, and deleting them from a data store.

